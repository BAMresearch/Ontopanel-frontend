"use strict";self.webpackHotUpdatedrawio_test(179,{710:(e,t,n)=>{let o=new class{constructor(){this.mesoNamespace=["base:https://purl.matolab.org/mseo/methods/example/","mid:https://purl.matolab.org/mseo/mid/","cco:http://www.ontologyrepository.com/CommonCoreOntologies/","obo:http://purl.obolibrary.org/obo/","pt:http://www.daml.org/2003/01/periodictable/PeriodicTable#","geo:http://www.opengis.net/ont/geosparql#"],this.ontoBank={"ontopanel-onto-extra-btn-MSEO":{}},this.currentCategoriesContent={title:null,categories:{Class:{name:"Class",content:null},OP:{name:"ObjectProperty",content:null},DP:{name:"DatatypeProperty",content:null},Individual:{name:"Individual",content:null},AP:{name:"AnnotationProperty",content:null},Datatype:{name:"Datatype",content:null}}}}modifyOntoBank=(e,t)=>{switch(t){case"reset":this.ontoBank={"ontopanel-onto-extra-btn-MSEO":{}};break;case"add":this.ontoBank[e[0]]=e[1];break;case"delete":delete this.ontoBank[e[0]]}};modifyCurrentCategoriesContent=(e,t,n)=>{switch(n){case"reset":this.currentCategoriesContent={title:"none",categories:{Class:{name:"Class",content:null},OP:{name:"ObjectProperty",content:null},DP:{name:"DatatypeProperty",content:null},Individual:{name:"Individual",content:null},AP:{name:"AnnotationProperty",content:null},Datatype:{name:"Datatype",content:null}}};break;case"selected":this.currentCategoriesContent.title=e,Object.keys(this.currentCategoriesContent.categories).forEach((e=>{this.currentCategoriesContent.categories[e].content=t[e]}))}};loadCurrentTable=(e,t="selected")=>{switch(t){case"selected":let n=e.onto_table.tree;this.modifyCurrentCategoriesContent(e.title,n,t);break;case"reset":this.modifyCurrentCategoriesContent(null,null,t)}document.getElementById("ontopanel-tree-title").innerHTML=`selected: ${this.currentCategoriesContent.title}`,console.log("load data"),document.getElementById("ontopanel-tree-class-btn").click()}};const l=class{constructor(e,t){this.app=e,this.data=t,this.init()}init(){this.btn=document.createElement("button"),this.btn.innerHTML='<div class="onto-button"> <div name="button-name" style="border:none">buttonname</div> <div class="ontopanel-menu" style="display:none"> <div class="menu-tag">Info</div> <div class="menu-tag">Update</div> <div class="menu-tag">Delete</div> </div> <div class="ontopanel-box" style="display:none"> <div class="box-inner"> <span class="box-close-span">&times;</span> <div name="info-detail" style="overflow:auto;font-size:15px;text-align:left;white-space:nowrap"></div> </div> </div> </div> ';let e=this.data.title;this.btn.querySelector('div[name="button-name"]').textContent=e;const t="ontopanel-onto-extra-btn-"+e;this.btn.id=t,o.modifyOntoBank([t,this.data],"add"),this.btn.onclick=e=>{e.preventDefault();let t=this.btn.id,n=o.ontoBank[t];o.loadCurrentTable(n)},this.btn.addEventListener("contextmenu",(e=>{e.preventDefault(),this.triggerMenu()})),this.btn.onmouseleave=e=>{e.preventDefault(),this.btn.querySelector(".ontopanel-menu").style.display="none"}}triggerMenu=()=>{let e=this.btn.querySelector(".ontopanel-menu"),t=e.children[0],n=e.children[1],o=e.children[2];e.style.display="block",n.onclick=t=>{t.preventDefault(),t.stopPropagation(),e.style.display="none";let n=new r(this.app);n.updateTigger(),n.ontoForm.querySelector('input[name="formName"]').value=this.data.title},t.onclick=t=>{t.preventDefault(),t.stopPropagation(),e.style.display="none",this.showOntoInfo()},o.onclick=t=>{t.preventDefault(),t.stopPropagation(),e.style.display="none",this.deleteOnto()}};showOntoInfo=()=>{let e=this.btn.id,t=o.ontoBank[e].title,n=o.ontoBank[e].onto_source,l=o.ontoBank[e].date_created,r=this.btn.querySelector(".ontopanel-box");r.onclick=e=>{e.stopPropagation()};let i=this.btn.querySelector('div[name="info-detail"]');this.btn.querySelector(".box-close-span").onclick=()=>{r.style.display="none"},i.innerHTML=`\n      <h4>Info about this ontology:</h4>\n      <ul style="padding-left:20px">\n        <li><b>title</b>: ${t}</li>\n        <li><b>source</b>: ${n}</li>\n        <li><b>updated date</b>: ${l}</li>\n      </ul>\n      `,r.style.display="block"};deleteOnto=()=>{let e=this.btn.id,t=localStorage.getItem("loginUser"),n=o.ontoBank[e].id;t?(t=JSON.parse(t),fetch("https://ontopanel.herokuapp.com/api/v1/ontos/change/"+n,{method:"DELETE",headers:new Headers({Authorization:`Token ${t.token}`})}).then((t=>{t.ok?(o.ontoBank[e].title==o.currentCategoriesContent.title&&o.loadCurrentTable(null,"reset"),o.modifyOntoBank([e,null],"delete"),this.btn.remove(),this.handleInfoToggle("Deleted in your databank!","green")):t.json().then((e=>{let t=Object.keys(e)[0];this.handleInfoToggle(e[t],"red")}))})).catch((e=>{this.handleInfoToggle(e,"red")}))):(o.ontoBank[e].title==o.currentCategoriesContent.title&&o.loadCurrentTable(null,"reset"),o.modifyOntoBank([e,null],"delete"),this.btn.remove(),this.handleInfoToggle("Deleted locally","green"))};handleInfoToggle=(e,t)=>{let n=this.app.querySelector("#ontopanel-onto-menu-info");n.innerText=e,n.style.color=t,n.style.display="block",setTimeout((()=>{n.style.display="none"}),8e3)}},r=class{constructor(e){this.app=e,this.init()}init(){this.uploaderBox=document.createElement("div"),this.uploaderBox.innerHTML='<div class="ontopanel-box"> <div class="box-inner"> <span class="box-close-span">&times;</span> <form enctype="multipart/form-data" class="ontopanel-form"> <h3 style="margin:0">Uploader</h3> <br/> <div> <p>Please upload a file</p> <input type="file" name="formFile"/> </div> <div> <p>Or <br>Enter URL of raw data</p> <input type="url" name="formURL" placeholder="https://example.com"/> </div> <div> <p>And enter the ontology name</p> <input type="text" name="formName" placeholder="mseo" style="width:80px" maxlength="5" required="true"> </div> <div> <button type="submit" name="upload">Submit</button> <button type="submit" name="update" style="display:none">Update</button> <span name="form-info" style="display:none"></span> </div> </form> </div> </div>',this.uploaderBox.style.display="none",this.app.appendChild(this.uploaderBox);let e=this.uploaderBox.querySelector(".box-close-span"),t=this.uploaderBox.querySelector("form");this.ontoForm=t,e.onclick=()=>{this.ontoForm.reset(),this.uploaderBox.style.display="none"}}addTrigger=()=>{this.uploaderBox.style.display="block",console.log(this.uploaderBox);let e=this.ontoForm.querySelector('button[name="upload"]');this.updateOrAddBtn("add"),e.onclick=e=>{e.preventDefault(),this.ontoForm.checkValidity()?this.ontoAddFormToggle(this.ontoForm):this.ontoForm.reportValidity()}};updateTigger=e=>{this.uploaderBox.style.display="block";let t=this.ontoForm.querySelector('button[name="update"]');this.updateOrAddBtn("update"),t.onclick=t=>{t.preventDefault(),this.ontoForm.checkValidity()?this.ontoUpdateFormToggle(this.ontoForm,e):this.ontoForm.reportValidity()}};updateOrAddBtn=e=>{let t=this.ontoForm.querySelector('button[name="upload"]'),n=this.ontoForm.querySelector('button[name="update"]');t.style.display="add"===e?"block":"none",n.style.display="add"===e?"none":"block"};ontoAddFormToggle=e=>{let t=new FormData(e),n=t.get("formName").trim(),l=t.get("formFile"),r=t.get("formURL").trim(),i=this.ontoForm.querySelector('span[name="form-info"]');if(l.size||r)if(Object.keys(o.ontoBank).includes("ontopanel-onto-extra-btn-"+n))this.handleInfoToggle("this name is taken, use another one!","red");else{i.innerText="In process, please wait.",i.style.color="green",i.style.display="block";let e=localStorage.getItem("loginUser");e?this.ontoAddDB(t,e):this.ontoAddUpdateLocal(t)}else this.handleInfoToggle("Please enter File or URL!","red")};ontoAddUpdateLocal=(e,t=null,n="add")=>{fetch("https://ontopanel.herokuapp.com/api/v1/ontos/owltable/",{method:"POST",body:e}).then((e=>{e.ok?e.json().then((e=>{switch(n){case"add":let n=new l(this.app,e);this.app.querySelector("#ontopanel-onto-extra-btn").prepend(n.btn),this.handleInfoToggle("Succssfully added locally!","green");break;case"update":this.updateOntoBtn(e,t),this.handleInfoToggle("Succssfully updated locally!","green")}this.ontoForm.reset()})):e.json().then((e=>{let t=Object.keys(e)[0];this.handleInfoToggle(e[t],"red")}))})).catch((e=>{this.handleInfoToggle(e,"red")}))};ontoAddDB=(e,t)=>{t=JSON.parse(t),fetch("https://ontopanel.herokuapp.com/api/v1/ontos/lists/",{method:"POST",body:e,headers:new Headers({Authorization:`Token ${t.token}`})}).then((e=>{e.ok?e.json().then((e=>{let t=new l(this.app,e);this.app.querySelector("#ontopanel-onto-extra-btn").prepend(t.btn),this.handleInfoToggle("Succssfully added to your database!","green"),this.ontoForm.reset()})):e.json().then((e=>{let t=Object.keys(e)[0];this.handleInfoToggle(e[t],"red")}))})).catch((e=>{this.handleInfoToggle(e,"red")}))};ontoUpdateFormToggle=(e,t)=>{let n=this.ontoForm.querySelector('span[name="form-info"]'),l=new FormData(e),r=l.get("formName").trim(),i=l.get("formFile"),a=l.get("formURL").trim();if(i.size||a)if(Object.keys(o.OntoBank).filter((e=>e!==t)).includes("ontopanel-onto-extra-btn-"+r))this.handleInfoToggle("this name is taken, use another one!","red");else{n.innerText="In process, please wait.",n.style="color: green; display:block;";let e=localStorage.getItem("loginUser");e?this.ontoUpdateDB(l,t,e):this.ontoAddUpdateLocal(l,t,"update")}else this.handleInfoToggle("Please enter File or URL!","red")};updateOntoBtn=(e,t)=>{let n=this.app.querySelector("#"+t),l=e.title;n.innerText=l;const r="ontopanel-onto-extra-btn-"+l;n.id=r,o.modifyOntoBank([t,null],"delete"),o.modifyOntoBank([r,e],"add"),o.loadCurrentTable(e)};ontoUpdateDB=(e,t,n)=>{n=JSON.parse(n);let l=o.OntoBank[t].id;fetch("https://ontopanel.herokuapp.com/api/v1/ontos/change/"+l,{method:"PUT",body:e,headers:new Headers({Authorization:`Token ${n.token}`})}).then((e=>{e.ok?e.json().then((e=>{this.updateOntoBtn(e,t),this.handleInfoToggle("Succssfully updated in your databank!","green"),this.ontoForm.reset()})):e.json().then((e=>{let t=Object.keys(e)[0];this.handleInfoToggle(e[t],"red")}))})).catch((e=>{this.handleInfoToggle(e,"red")}))};handleInfoToggle=(e,t)=>{let n=this.uploaderBox.querySelector('span[name="form-info"]');n.innerText=e,n.style.color=t,n.style.display="block",setTimeout((()=>{n.style.display="none"}),8e3)}},i=(e,t,n,o)=>{let l=document.createElement("ul");return t.forEach((t=>{let r=n.cloneNode(!0),p=r.firstElementChild,c=p.children[0],u=p.children[1],h=p.children[2],m=p.children[3],y=u.children[0];y.innerHTML=t[0];let g="li-term-"+y.innerText;if(y.id=g,y.onclick=e=>{e.preventDefault();let t=u.children[1],n=a(g,t);t.replaceWith(n),t.style.display="block",t.scrollIntoView({block:"nearest",inline:"center"})},h.onclick=t=>{s(g,e,o,t)},m.onclick=t=>{d(g,e)},l.appendChild(r),t[1].length){c.innerText="⊖",c.style="cursor:pointer; margin-right:1px;",c.setAttribute("name","li-collapse-btn");let l=i(e,t[1],n,o);r.appendChild(l),c.onclick=e=>{let t=e.target,n=e.target.parentElement.nextElementSibling;"⊖"===e.target.innerText?(n.style.display="none",t.innerText="⊕"):(n.style.display="block",t.innerText="⊖")}}else c.innerHTML="--",c.style="color:grey;margin-right:1px;",p.prepend(c)})),l},a=(e,t)=>{let n=e.replace("li-term-",""),l="ontopanel-onto-extra-btn-"+o.currentCategoriesContent.title,r=JSON.parse(o.ontoBank[l].onto_table.table)[n];return t.querySelector('div[name="entity-label"]').innerText=r.RDFLabel,t.querySelector('div[name="entity-color"]').innerText=r.Color,t.querySelector('div[name="entity-annos"]').innerHTML=p(r.Annotations).innerHTML,t.querySelector('div[name="entity-special"]').innerHTML=p(r.SpecialInfo).innerHTML,t.onclick=e=>{e.stopPropagation()},t.onmouseleave=e=>{e.preventDefault(),t.style.display="none"},t},s=(e,t,n,l)=>{let r=e.replace("li-term-",""),i=0,a=o.ontoBank["ontopanel-onto-extra-btn-"+o.currentCategoriesContent.title],s=JSON.parse(a.onto_table.table)[r],d=s.BelongsTo,p=s.Color,c=r;switch(d){case"Class":let e;e="none"===p?"rounded=0;whiteSpace=wrap;html=1;":`rounded=0;whiteSpace=wrap;html=1;fillColor=${p};`;var u=new mxCell(c,new mxGeometry(0,0,90,26),e),h=c.length,m=t.editor.graph.getPreferredSizeForCell(u);u.geometry.width=m.width+h,u.vertex=!0,i=m.width+h+30;break;case"OP":u=new mxCell(c,new mxGeometry(0,0,90,26),"endArrow=classic;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=0;entryY=0.5;entryDx=0;entryDy=0;endSize=8;arcSize=0;"),h=c.length,u.geometry.setTerminalPoint(new mxPoint(0,0),!0),u.geometry.setTerminalPoint(new mxPoint(8*h+20,0),!1),u.edge=!0,i=8*h+20+30;break;case"DP":case"AP":u=new mxCell(c,new mxGeometry(0,0,0,0),"edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;fontSize=12;"),h=c.length,u.geometry.setTerminalPoint(new mxPoint(0,0),!0),u.geometry.setTerminalPoint(new mxPoint(8*h+20,0),!1),u.edge=!0,i=8*h+20+30;break;case"Individual":u=new mxCell("<u>"+c+"</u>",new mxGeometry(0,0,90,26),"rounded=0;whiteSpace=wrap;html=1;"),h=c.length,m=t.editor.graph.getPreferredSizeForCell(u),u.geometry.width=m.width+h,u.vertex=!0,i=m.width+h+30;break;case"Datatype":u=new mxCell(c,new mxGeometry(0,0,90,26),"rounded=0;whiteSpace=wrap;html=1;fillColor=#FF8C00;"),h=c.length,m=t.editor.graph.getPreferredSizeForCell(u),u.geometry.width=m.width+h,u.vertex=!0,i=m.width+h+30}let y=t.editor.graph,g=mxUtils.convertPoint(y.container,n.getX(),n.getY()),f=mxUtils.convertPoint(y.container,mxEvent.getClientX(l),mxEvent.getClientY(l)),b=y.view.translate,v=y.view.scale,x=g.x/v-b.x-i,w=f.y/v-b.y;const k=[u];y.importCells(k,x,w)},d=(e,t)=>{let n=e.replace("li-term-",""),l=o.ontoBank["ontopanel-onto-extra-btn-"+o.currentCategoriesContent.title],r=JSON.parse(l.onto_table.table)[n],i=r.BelongsTo,a=r.Color,s=n;var d=t.editor.graph.getSelectionCells();d&&d.forEach((e=>{let n;switch(i){case"Individual":t.editor.graph.model.setValue(e,"<u>"+s+"</u>");break;case"Class":t.editor.graph.model.setValue(e,s),"none"!==a?(n=`rounded=0;whiteSpace=wrap;html=1;fillColor=${a};`,t.editor.graph.model.setStyle(e,n)):(n="rounded=0;whiteSpace=wrap;html=1;",t.editor.graph.model.setStyle(e,n));break;case"Datatype":n="rounded=0;whiteSpace=wrap;html=1;fillColor=#FF8C00;",t.editor.graph.model.setStyle(e,n);default:t.editor.graph.model.setValue(e,s)}}))},p=e=>{let t=document.createElement("div");return e&&Object.keys(e).forEach((n=>{if(e[n].length){let o=document.createElement("div"),l=document.createElement("div"),r=document.createElement("hr");l.innerText=n,l.style.color="steelblue",l.style.marginBottom="3px";let i=document.createElement("div");i.innerText=e[n].join("\n"),r.style.borderTop="1px dotted #333",r.style.margin="5px 0px 5px 0px",o.append(l,i,r),t.appendChild(o)}})),t};n(354),n(524);let c=new class{constructor(){this.errors=null,this.result=null,this.mappingData=null}modifyData=e=>{this.errors=e.errors,this.result=e.result};resetData=()=>{this.errors=null,this.result=null,this.mappingData=null};uploadMappingData=e=>{this.mappingData=e}};const u=(e,t,n)=>{let o=document.createElement("li");return o.id=e,o.innerHTML=`\n    <div><b>ID: </b>${e}</div> \n    <div><b>Error: </b>${t}</div>\n    `,o.onclick=t=>{t.preventDefault();let o=n.editor.graph,l=o.getModel().getCell(e);o.clearSelection(),o.setSelectionCell(l),o.scrollCellToVisible(l,!0)},o},h=e=>{let t=mxUtils.createXmlDocument().createElement("object");for(let[n,o]of Object.entries(e))t.setAttribute(n,o);return t},m=e=>{let t=e.value;if(!t){let n=e.children;if(n)for(let e=0;e<n.length;e++){let o=n[e];if((o.style.includes("text")||o.style.includes("edgeLabel"))&&o.value){t="string"==typeof o.value?o.value:"";break}}}return t},y=e=>{var t=document.createElement("div");t.id="convertor-app",t.style="height: 400px; width: 380px; font-size: 15px; padding: 5px; ",t.innerHTML='<div class="convertor-container"> <div class="transformer"> <div>If you used the chowlk libary, please transform first.</div> <input type="button" name="transform" value="transform"/> </div> <div class="convertor-bar"> <select name="rdf-format"> <option value="application/rdf+xml">rdf/xml</option> <option value="turtle">turtle</option> </select> <input type="button" name="convert" value="Convert"/> </div> <div class="convertor-show"> <div class="convertor-btn-group"> <input type="button" name="mapping" value="Mapping"/> <input type="button" name="result" value="Result"/> <input type="button" name="show-error" value="ShowError"/> <input type="button" value="&#x2193;" style="width:30px;background-color:#dc143c" name="download"/> </div> <div class="convertor-content"> <div></div> </div> </div> </div> ',t.addEventListener("contextmenu",(e=>e.preventDefault())),mxUtils.br(t),mxResources.parse("convertor=Ontopanel-convertor");var n=new mxWindow(mxResources.get("convertor"),t,document.body.offsetWidth-420,140,390,420,!0,!0);n.destroyOnClose=!1,n.setMaximizable(!1),n.setResizable(!1),n.setClosable(!0),n.setVisible(!0);let o=t.querySelector('input[name="convert"]'),l=t.querySelector('input[name="transform"]'),r=t.querySelector('input[name="mapping"]'),i=t.querySelector('input[name="result"]'),a=t.querySelector('input[name="show-error"]'),s=t.querySelector(".convertor-content"),d=t.querySelector('input[name="download"]');return r.onclick=e=>{let t=(()=>{let e=document.createElement("div");return e.innerHTML='<div class="mapping-tool"> <form action="multipart/form-data"> <input type="file" id="myfile" name="myFile" required style="max-width:190px"/> <select name="filetype"> <option value="csv">csv</option> <option value="excel">excel</option> <option value="json">json</option> </select> <select name="decimal"> <option value=",">,</option> <option value=";">.</option> </select> <select name="csv-seperator"> <option value=",">,</option> <option value=";">;</option> </select> <input type="submit" name="submit"/> </form> <div>under development</div> </div> ',e})();s.firstElementChild.replaceWith(t)},i.onclick=e=>{let t=document.createElement("pre");t.textContent=c.result,s.firstElementChild.replaceWith(t)},a.onclick=t=>{if(c.errors){let t=((e,t)=>{let n=e.other_errors,o=e.edge_errors,l=e.node_errors,r=e.relation_errors,i=document.createElement("div");if(i.innerHTML='<div class="error-list"> <div name="other" style="display:none"> <div class="error-type">General Errors</div> <ul></ul> <hr/> </div> <div name="node" style="display:none"> <div class="error-type">Node Errors</div> <ul></ul> <hr/> </div> <div name="edge" style="display:none"> <div class="error-type">Edge Errors</div> <ul></ul> <hr/> </div> <div name="relation" style="display:none"> <div class="error-type">Relation Errors</div> <ul></ul> <hr/> </div> </div> ',n.length){let e=i.querySelector('div[name="other"]'),o=e.querySelector("ul");n.forEach((e=>{let n=e.id,l=e.message,r=u(n,l,t);o.appendChild(r)})),e.style.display="block"}if(o.length){let e=i.querySelector('div[name="edge"]'),n=e.querySelector("ul");o.forEach((e=>{let o=e.id,l=e.message,r=u(o,l,t);n.appendChild(r)})),e.style.display="block"}if(l.length){let e=i.querySelector('div[name="node"]'),n=e.querySelector("ul");l.forEach((e=>{let o=e.id,l=e.message,r=u(o,l,t);n.appendChild(r)})),e.style.display="block"}if(r.length){let e=i.querySelector('div[name="relation"]'),n=e.querySelector("ul");r.forEach((e=>{let o=((e,t,n)=>{let o=document.createElement("li"),l="["+e.join(",")+"]";return o.innerHTML=`\n    <div><b>ID List: </b>${l}</div> \n    <div><b>Error: </b>${t}</div>\n    `,o.onclick=t=>{t.preventDefault();let o=n.editor.graph,l=o.getModel(),r=e.map((e=>l.getCell(e)));o.clearSelection(),o.setSelectionCells(r),o.scrollCellToVisible(r[1],!0)},o})(e.id_list,e.message,t);n.appendChild(o)})),e.style.display="block"}return i})(c.errors,e);s.firstElementChild.replaceWith(t)}},d.onclick=e=>{if(c.result){let e=document.createElement("a");e.setAttribute("href","data:application/xml;charset=utf-8,"+encodeURIComponent(c.result)),e.setAttribute("download","file.xml"),t.appendChild(e),e.click(),t.removeChild(e)}},l.onclick=t=>{((e,t)=>{let n=e.editor.graph,o=n.getDefaultParent(),l=n.getGraphBounds(),r=n.getCells(l.x,l.y,l.width,l.height,o,null,null,null,!0),i={},a=r.filter((e=>e.isVertex())),s={node_errors:[],edge_errors:[],other_errors:[],relation_errors:[]};a.forEach((e=>{if("object"==typeof e.value);else{let t={},[o,l]=(e=>{let t=e.style,n=m(e),o=null,l=document.createElement("div");l.innerHTML=n;let r=l.innerText,i={"⨅":"IntersectionOf",intersectionOf:"IntersectionOf","⨆":"UnionOf",unionOf:"UnionOf","≡":"EquivalentClass","⊥":"DisjointClass"};return t.includes("shape=note")?o="Namespace":t.includes("shape=document")?o="Metadata":t.includes("shape=parallelogram")?o="CustomDatatype":t.includes("shape=hexagon")?r.includes("AllDifferent")&&(o="AllDifferent"):t.includes("ellipse")?Object.keys(i).forEach((e=>{r.includes(e)&&(o=i[e])})):t.includes("rhombus")?r.includes("owl:ObjectProperty")?o="ObjectProperty":r.includes("owl:DatatypeProperty")&&(o="DatatypeProperty"):t.includes("edgeLabel")||t.includes("text")?o="pass":t.includes("rounded=0")&&(n.includes("</u>")||t.includes("fontStyle=4")?o="Individual":r.includes("^^")||r.includes("@")?o="DataValue":t.includes("dashed=1")||(o="Class")),[o,n]})(e);if(o&&"pass"!==o){t={label:l,Type:o};let r=h(t);n.model.setValue(e,r),i[e.id]=o}else"pass"!==o&&s.node_errors.push({id:e.id,message:"not recongized, please use the ontopanel libary to repalce it."})}let o={result:"Transformer can wrongly convert the following:\nnodes: nodes in rectangle shapes, \nedges: edges without labels.\n\nYou cant click ShowError to check the errors, but maybe not all the errors are catched.\nPlease use the ontopanel-libary shapes to replace the errors.\nHowever, it usually will not be a problem if you could not correct all the errors, because convertor will check the errors again.",errors:s};c.modifyData(o),t.click()})),r.filter((e=>e.isEdge())).forEach((e=>{if("object"==typeof e.value);else{let t={},[o,l]=((e,t)=>{let n=e.style,o=e.target,l=e.source,r=m(e),i=null,a=document.createElement("div");a.innerHTML=r;let s=a.innerText,d={"rdfs:subClassOf":"SubClassOf","rdf:type":"RDFType","owl:equivalentClass":"EquivalentClass","owl:disjointWith":"DisjointClass","owl:complementOf":"ComplementOf","rdfs:subPropertyOf":"SubPropertyOf","owl:equivalentProperty":"EquivalentProperty","owl:inverseOf":"InverseOf","rdfs:domain":"Domain","rdfs:range":"Range","owl:sameAs":"SameAs","owl:differentFrom":"DifferentFrom"};return r&&0!==r.length||(r="",n.includes("endArrow=block")||n.includes("startArrow=block")?i="SubClassOf":(n.includes("endArrow=open")||n.includes("startArrow=open"))&&(i="Connector",l&&l.id in t)&&"Individual"===t[l.id]&&(i="RDFType")),Object.keys(d).forEach((e=>{s.includes(e)&&(i=d[e])})),!i&&(i="ObjectProperty",o&&o.id in t)&&"DataValue"===t[o.id]&&(i="DatatypeProperty"),[i,r]})(e,i);if(o&&"pass"!==o){t={label:l,Type:o};let r=h(t);n.model.setValue(e,r)}}}))})(e,i)},o.onclick=n=>{n.preventDefault(),c.resetData();let o=(e=>{let t=e.editor.graph,n=t.getDefaultParent(),o=t.getGraphBounds(),l=t.getCells(o.x,o.y,o.width,o.height,n,null,null,null,!0),r={},i={},a={node_errors:[],edge_errors:[],relation_errors:[],other_errors:[]};l.forEach((e=>{let t=e.style;if("object"==typeof e.value){let n=e.getAttribute("Type",null);if(n){let o=e.id,l=e.source?e.source.id:"none",a=e.target?e.target.id:"none",s=e.geometry?{...e.geometry}:"none",d=e.value.attributes,p=d.label.value.trim(),c={};for(let e=0;e<d.length;e++){let t=d[e],n=t.name.trim();"label"!==n&&"Type"!==n&&(c[n]=t.value.trim())}let u=Object.keys(c).length?c:"none";if(e.isEdge()){if(!p){let t=e.children;if(t)for(let e=0;e<t.length;e++){let n=t[e];if((n.style.includes("text")||n.style.includes("edgeLabel"))&&n.value){p="string"==typeof n.value?n.value:"";break}}}i[o]={type:n,style:t,label:p,source:l,target:a,objectData:u}}else r[o]={type:n,style:t,label:p,geometry:s,objectData:u}}else{let t={id:e.id,message:"this shape is not from ontopanel-libary, please use libary or transform."};a.other_errors.push(t)}}else if(t.includes("text")||t.includes("edgeLabel"));else{let t={id:e.id,message:"this shape is not from ontopanel-libary, please use libary or transform."};a.other_errors.push(t)}}));let s=JSON.stringify({nodes:r,edges:i,errors:a});return console.log(s),{nodes:r,edges:i,errors:a}})(e),l={format:t.querySelector("select").value,data:o};fetch("https://ontopanel.herokuapp.com/api/v1/convertor/",{method:"POST",body:JSON.stringify(l),headers:new Headers({"Content-Type":"application/json"})}).then((e=>{e.ok?e.json().then((e=>{c.modifyData(e),i.click()})):e.json().then((e=>{let t={result:e,errors:null};c.modifyData(t),i.click()}))})).catch((e=>{let t={result:text,errors:null};c.modifyData(t),i.click()}))},n};Draw.loadPlugin((function(e){let t=(e=>{var t=document.createElement("div");t.id="ontopanel-app",t.style="height: 450px; width: 380px; font-size: 15px; padding: 5px; ",t.innerHTML='<div id="ontopanel-container" class="ontopanel-sign"> <div id="ontopanel-sign-info">Current user:</div> <div style="display:flex"> <button id="ontopanel-signup-btn">SignUp</button> <button id="ontopanel-login-btn">Login</button> <button id="ontopanel-logout-btn" style="display:none">Logout</button> </div> </div> <div id="ontopanel-onto-btngroup" style="display:flex;height:40px"> <div style="display:flex;height:30px" id="ontopanel-onto-extra-btn"></div> <div style="display:flex;height:30px"> <button id="ontopanel-onto-extra-btn-MSEO" style="cursor:pointer"> MSEO </button> <button id="ontopanel-onto-add-btn" style="cursor:pointer">+</button> <p id="ontopanel-tree-title" style="margin:5px 0 0 30px;font-size:18px;font-weight:700"> selected: none </p> <button id="ontopanel-namespace-btn" style="border:1px soild #000;margin:5px 0 0 5px;cursor:pointer;height:20px"> ⇱ prefix </button> </div> </div> <div id="ontopanel-onto-menu-info" style="display:none"></div> <div id="ontopanel-tree-container" class="ontopanel-tree"> <div style="display:flex;height:30px"> <button id="ontopanel-tree-class-btn">Class</button> <button id="ontopanel-tree-op-btn">OP</button> <button id="ontopanel-tree-dp-btn">DP</button> <button id="ontopanel-tree-ind-btn">Ind</button> <button id="ontopanel-tree-ap-btn">AP</button> <button id="ontopanel-tree-dt-btn">DT</button> <input id="ontopanel-search-term" style="margin-left:50px" placeholder="search entity"/> </div> <div id="onto-tree-content"> <div>treeshowhere</div> </div> </div> ',t.addEventListener("contextmenu",(e=>e.preventDefault())),mxUtils.br(t),mxResources.parse("entityfinder=Ontopanel-entityFinder");var n=new mxWindow(mxResources.get("entityfinder"),t,document.body.offsetWidth-480,140,390,480,!0,!0);n.destroyOnClose=!1,n.setMaximizable(!1),n.setResizable(!1),n.setClosable(!0),n.setVisible(!1);let a=t.querySelector("#ontopanel-onto-add-btn"),s=new r(t);a.onclick=e=>{e.preventDefault(),s.addTrigger()};let d=new class{constructor(e){this.app=e,this.init()}init=()=>{let e=document.createElement("div");e.innerHTML='<div id="ontopanel-sign-box" class="ontopanel-box"> <div class="box-inner"> <span class="box-close-span">&times;</span> <form id="ontopanel-signup-form" class="ontopanel-form"> <h3>Sign Up</h3> <p class="box-info"></p> <div> <input type="text" name="signEmail" autofocus placeholder="Email Address" required/> </div> <div> <input type="password" name="signPsw" autofocus placeholder="Password" pattern="[A-Za-z0-9]+" required title="Only number or letter are accepted"/> </div> <div> <input type="password" name="signPsw-repeat" autofocus placeholder="Confirm password" pattern="[A-Za-z0-9]+" required title="Only number or letter are accepted"/> </div> <button type="submit">Sign Up</button> <p style="text-align:center"> <a>Already have an account? Sign in</a> </p> </form> <form id="ontopanel-login-form" class="ontopanel-form"> <h3>Login</h3> <p class="box-info"></p> <div> <input type="text" placeholder="Email Address" autofocus name="loginEmail" required/> </div> <div> <input type="password" placeholder="Password" autofocus name="loginPsw" required/> </div> <button type="submit">Login</button> <p style="text-align:center"> <a id="ontopanel-reset-password-link">Forgot your password?</a> <br/> <a id="ontopanel-sign-link">Don\'t have an account? Create account</a> </p> </form> </div> </div> <div id="ontopanel-reset-password-box" class="ontopanel-box"> <div class="box-inner"> <span class="box-close-span">&times;</span> <div> <form id="ontopanel-reset-password-form" class="ontopanel-form"> <h3>Send email</h3> <h5 style="margin:2px">Send email first to get secret key.</h5> <p class="box-info"></p> <div> <input type="text" placeholder="Email Address" autofocus name="resetEmail" required/> </div> <button type="submit">Send email</button> </form> <hr/> <form id="ontopanel-reset-password-confirm-form" class="ontopanel-form"> <h3>Reset password confirm</h3> <h5 style="margin:2px"> Enter secret key below to reset your password. </h5> <p class="box-info"></p> <div> <input type="text" placeholder="Secrect key" autofocus name="secretKey" required/> </div> <div> <input type="password" placeholder="New password" autofocus name="resetPsw" required/> </div> <div> <input type="password" placeholder="Confirm new password" autofocus name="resetPsw-con" required/> </div> <button type="submit">Confirm</button> </form> </div> </div> </div> ',this.app.appendChild(e),e.querySelectorAll(".box-close-span").forEach((e=>{e.onclick=()=>{let t=e.parentNode.parentNode;t.style.display="none",t.querySelectorAll("form").forEach((e=>{e.querySelector(".box-info").innerText="",e.reset()}))}})),this.signLoginBox=e.querySelector("#ontopanel-sign-box"),this.signLoginBox.style.display="none",this.resetPasswordBox=e.querySelector("#ontopanel-reset-password-box"),this.resetPasswordBox.style.display="none";let t=localStorage.getItem("loginUser");t&&(t=JSON.parse(t),this.downloadOnto(t.token,t.email))};signUp=()=>{this.signLoginBox.style.display="block";let e=this.signLoginBox.querySelector("#ontopanel-signup-form"),t=this.signLoginBox.querySelector("#ontopanel-login-form");e.style.display="block",t.style.display="none",e.querySelector(".box-info").innerText="",e.reset(),e.onsubmit=e=>{e.preventDefault();let t=new FormData(e.target);this.validateSignUp(t)},e.querySelector("a").onclick=e=>{e.preventDefault(),this.login()}};login=()=>{this.signLoginBox.style.display="block";let e=this.signLoginBox.querySelector("#ontopanel-signup-form"),t=this.signLoginBox.querySelector("#ontopanel-login-form");e.style.display="none",t.style.display="block",t.querySelector(".box-info").innerText="",t.reset(),t.onsubmit=e=>{e.preventDefault();let t=new FormData(e.target);this.validateLogin(t)},t.querySelector("#ontopanel-sign-link").onclick=e=>{e.preventDefault(),this.signUp()},t.querySelector("#ontopanel-reset-password-link").onclick=e=>{e.preventDefault(),this.resetPasswordBox.style.display="block",this.resetPassword()}};logout=()=>{if(this.handleLogout(),localStorage.getItem("loginUser")){let e=JSON.parse(localStorage.getItem("loginUser")).token;localStorage.removeItem("loginUser"),fetch("https://ontopanel.herokuapp.com/api/v1/user/logout/",{method:"GET",headers:new Headers({"Content-Type":"application/json",Authorization:`Token ${e}`})})}};resetPassword=()=>{this.resetPasswordBox.style.display="block";let e=this.resetPasswordBox.querySelector("#ontopanel-reset-password-form"),t=this.resetPasswordBox.querySelector("#ontopanel-reset-password-confirm-form");e.onsubmit=e=>{e.preventDefault();let t=new FormData(e.target);this.resetPasswordToggle(t)},t.onsubmit=e=>{e.preventDefault();let t=new FormData(e.target);this.resetPasswordConfirmToggle(t)}};validateSignUp=e=>{let t=e.get("signEmail").trim(),n=e.get("signPsw").trim(),o=e.get("signPsw-repeat").trim(),l=this.signLoginBox.querySelector("#ontopanel-signup-form"),r=l.querySelector(".box-info");if(o!==n)this.handleFormInfo(r,"Passwords are not equal.");else{let e={email:t,password:n};fetch("https://ontopanel.herokuapp.com/api/v1/user/register/",{method:"POST",body:JSON.stringify(e),headers:new Headers({"Content-Type":"application/json"})}).then((e=>{e.ok?(this.handleFormInfo(r,"Sign Up successfully. Please login in.","green"),setTimeout((()=>{this.login(),l.reset()}),3e3)):e.json().then((e=>{let t=Object.keys(e)[0];this.handleFormInfo(r,e[t])}))})).catch((e=>{this.handleFormInfo(r,e)}))}};validateLogin=e=>{let t=this.signLoginBox.querySelector("#ontopanel-login-form"),n=t.querySelector(".box-info"),o={username:e.get("loginEmail").trim(),password:e.get("loginPsw").trim()};fetch("https://ontopanel.herokuapp.com/api/v1/user/login/",{method:"POST",body:JSON.stringify(o),headers:new Headers({"Content-Type":"application/json"})}).then((e=>{e.ok?e.json().then((e=>{localStorage.setItem("loginUser",JSON.stringify(e)),this.resetAll(),this.downloadOnto(e.token,e.email),this.handleFormInfo(n,"Login successfully.","green"),setTimeout((()=>{t.reset(),this.signLoginBox.style.display="none"}),1e3)})):e.json().then((e=>{let t=Object.keys(e)[0];this.handleFormInfo(n,e[t])}))})).catch((e=>{this.handleFormInfo(n,e)}))};downloadOnto=(e,t)=>{let n=this.app.querySelector("#ontopanel-sign-info");fetch("https://ontopanel.herokuapp.com/api/v1/ontos/lists/",{method:"GET",headers:new Headers({"Content-Type":"application/json",Authorization:`Token ${e}`})}).then((e=>{e.ok?e.json().then((e=>{e.forEach((e=>{let t=new l(this.app,e);this.app.querySelector("#ontopanel-onto-extra-btn").prepend(t.btn)})),n.innerText=`Current user: ${t}`,this.isLoggedIn(!0)})):e.json().then((e=>{n.innerText="Please login again",this.isLoggedIn(!1)}))})).catch((e=>{n.innerText="Please login again",this.isLoggedIn(!1)}))};resetPasswordToggle=e=>{let t=e.get("resetEmail").trim();var n=this.resetPasswordBox.querySelector("#ontopanel-reset-password-form .box-info");fetch("https://ontopanel.herokuapp.com/api/v1/user/reset_password/",{method:"POST",body:JSON.stringify({email:t}),headers:new Headers({"Content-Type":"application/json"})}).then((e=>{e.ok?e.json().then((e=>{let t=Object.keys(e)[0];this.handleFormInfo(n,e[t],"green")})):e.json().then((e=>{let t=Object.keys(e)[0];this.handleFormInfo(n,e[t])}))})).catch((e=>{this.handleFormInfo(n,e)}))};resetPasswordConfirmToggle=e=>{let t=e.get("secretKey").trim(),n=e.get("resetPsw").trim(),o=e.get("resetPsw-con").trim(),l=this.resetPasswordBox.querySelector("#ontopanel-reset-password-confirm-form .box-info");n!==o?this.handleFormInfo(l,"Passwords are not equal!"):fetch("https://ontopanel.herokuapp.com/api/v1/user/reset_password_confirm/",{method:"PATCH",body:JSON.stringify({secret_key:t,password:n}),headers:new Headers({"Content-Type":"application/json"})}).then((e=>{e.ok?e.json().then((e=>{let t=Object.keys(e)[0];this.handleFormInfo(l,e[t],"green"),setTimeout((()=>{this.login()}),3e3)})):e.json().then((e=>{let t=Object.keys(e)[0];this.handleFormInfo(l,e[t])}))})).catch((e=>{this.handleFormInfo(l,e)}))};resetAll=()=>{this.app.querySelector("#ontopanel-onto-extra-btn").innerText="",this.app.querySelector("#ontopanel-sign-info").innerText="",o.modifyOntoBank([],"reset"),o.loadCurrentTable(null,"reset")};handleLogout=()=>{this.isLoggedIn(!1),this.resetAll()};isLoggedIn=e=>{let t=this.app.querySelector("#ontopanel-login-btn");this.app.querySelector("#ontopanel-logout-btn").style.display=e?"block":"none",t.style.display=e?"none":"block"};handleFormInfo=(e,t,n="red")=>{e.style.color=n,e.textContent=t}}(t);t.querySelector("#ontopanel-signup-btn").onclick=e=>{e.preventDefault(),d.signUp()},t.querySelector("#ontopanel-login-btn").onclick=e=>{e.preventDefault(),d.login()},t.querySelector("#ontopanel-logout-btn").onclick=e=>{e.preventDefault(),d.logout()};let p=t.querySelector("#onto-tree-content");const c={"ontopanel-tree-class-btn":"Class","ontopanel-tree-op-btn":"OP","ontopanel-tree-dp-btn":"DP","ontopanel-tree-ind-btn":"Individual","ontopanel-tree-ap-btn":"AP","ontopanel-tree-dt-btn":"Datatype"};return Object.keys(c).forEach((l=>{t.querySelector("#"+l).onclick=l=>{let r=o.currentCategoriesContent.categories[c[l.target.id]],a=p.firstElementChild;if(r.content){let l=new class{constructor(e,t,n,o){this.app=e,this.ui=t,this.wnd=n,this.data=o,this.init()}init(){let e=document.createElement("div");e.innerHTML='<div class="tree-content"> <div style="display:flex;margin:8px 0 0 10px;font-size:17px"> <div name="cate-name">entitycate</div> <div class="collapse-btn" style="margin-left:10px">&#8853;</div> <div class="collapse-btn">&#8854;</div> </div> <hr/> <div style="height:300px;overflow:auto"> <div id="ontopanel-tree-entity">tree entity</div> </div> </div> <li> <div class="li-com"> <div>--</div> <div> <div name="li-term-text">entityText</div> <div class="tree-entity-box"> <div class="tree-box-title">RDF label:</div> <div name="entity-label" class="tree-box-content"></div> <hr/> <div class="tree-box-title">Annotations:</div> <div name="entity-annos" class="tree-box-content"></div> <hr/> <div class="tree-box-title">SpecialInfo:</div> <div name="entity-special" class="tree-box-content"></div> <hr/> <div class="tree-box-title">Color:</div> <div name="entity-color" class="tree-box-content"></div> </div> </div> <div class="ontoterm-btn" style="margin-left:5px">▲</div> <div class="ontoterm-btn">R</div> </div> </li> ',this.treeContent=e.querySelector(".tree-content"),this.treeContent.querySelector('div[name="cate-name"]').textContent=this.data.name;let t=this.treeContent.querySelectorAll(".collapse-btn")[0],n=this.treeContent.querySelectorAll(".collapse-btn")[1],o=this.app.querySelector("#ontopanel-search-term");t.onclick=e=>{e.preventDefault(),this.collpaseAll()},n.onclick=e=>{e.preventDefault(),this.foldAll()},o.onkeyup=e=>{e.preventDefault();let t=o.value.trim().toUpperCase();this.search(t)};let l=e.querySelector("li"),r=this.treeContent.querySelector("#ontopanel-tree-entity"),a=this.data.content,s=i(this.ui,a,l,this.wnd);r.replaceWith(s)}foldAll=()=>{let e=this.treeContent.querySelectorAll("ul >li");[...this.treeContent.querySelectorAll('[name="li-collapse-btn"]')].forEach((e=>{e.innerText="⊕"})),e.forEach((e=>{[...e.getElementsByTagName("ul")].forEach((e=>{e.style.display="none"}))}))};collpaseAll=()=>{let e=[...this.treeContent.querySelectorAll('[name="li-collapse-btn"]')],t=[...this.treeContent.getElementsByTagName("ul")];e.forEach((e=>{e.innerText="⊖"})),t.forEach((e=>e.style.display=""))};search=e=>{let t=this.treeContent.querySelectorAll("li");if(t.length){this.collpaseAll();let n="ontopanel-onto-extra-btn-"+o.currentCategoriesContent.title,l=JSON.parse(o.ontoBank[n].onto_table.table);for(let n=0;n<t.length;n++){let o=t[n].querySelectorAll('div[name="li-term-text"]'),r=o[0],i=r.textContent,a=l[i].RDFLabel,s=[...o],d=s.map((e=>e.firstChild.textContent)).join("\n"),p=s.map((e=>l[e.firstChild.textContent].RDFLabel)).join("\n");(d||p)&&(p.toUpperCase().indexOf(e)>-1||d.toUpperCase().indexOf(e)>-1?(t[n].style.display="",a.toUpperCase().indexOf(e)>-1||i.toUpperCase().indexOf(e)>-1?r.style.backgroundColor=e?"#fddde6":"transparent":r.style.background="transparent"):(t[n].style.display="none",r.style.background="transparent"))}}}}(t,e,n,r);a.replaceWith(l.treeContent)}else a.innerHTML=""}})),t.querySelector("#ontopanel-onto-extra-btn-MSEO").onclick=e=>{e.preventDefault(),fetch("plugins/ontopanelPlugin/ontoData/mseo_ontopanel.json").then((e=>e.json())).then((e=>{e.onto_table.namespaces=o.mesoNamespace,o.modifyOntoBank(["ontopanel-onto-extra-btn-MSEO",e],"add"),o.loadCurrentTable(e)}))},t.querySelector("#ontopanel-namespace-btn").onclick=t=>{if(t.preventDefault(),o.currentCategoriesContent.title){let l=o.ontoBank["ontopanel-onto-extra-btn-"+o.currentCategoriesContent.title].onto_table.namespaces.join("<br/>"),r=new mxCell(l+"<br/>",new mxGeometry(0,0,90,26),"shape=note;whiteSpace=wrap;html=1;backgroundOutline=1;darkOpacity=0.05;"),i=e.editor.graph.getPreferredSizeForCell(r);r.geometry.width=i.width+30,r.vertex=!0;let a=i.width+30,s=e.editor.graph,d=mxUtils.convertPoint(s.container,n.getX(),n.getY()),p=mxUtils.convertPoint(s.container,mxEvent.getClientX(t),mxEvent.getClientY(t)),c=e.editor.graph.view.translate,u=e.editor.graph.view.scale,h=d.x/u-c.x-a,m=p.y/u-c.y;const y=[r];e.editor.graph.importCells(y,h,m)}},n})(e);e.actions.addAction("entityfinder",(function(){t.setVisible(!t.isVisible())}));let n=y(e);e.actions.addAction("convertor",(function(){n.setVisible(!n.isVisible())}));var a=e.menus.get("extras"),s=a.funct;a.funct=function(t,n){s.apply(this,arguments),e.menus.addMenuItems(t,["convertor"],n),e.menus.addMenuItems(t,["entityfinder"],n)}}))}},(function(e){e.h=()=>"01817ab259d151d9a843"}));