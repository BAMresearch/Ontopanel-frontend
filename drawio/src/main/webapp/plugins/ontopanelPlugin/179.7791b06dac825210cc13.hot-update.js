"use strict";self.webpackHotUpdatedrawio_test(179,{431:(e,t,o)=>{o.r(t),o.d(t,{default:()=>a});var n=o(81),l=o.n(n),r=o(645),i=o.n(r)()(l());i.push([e.id,".ontopanel-tree{height:400px;border-radius:5px}.ontopanel-tree button{cursor:pointer}.ontopanel-tree hr{margin-top:4px;border:1px solid #333}.ontopanel-tree .ontopanel-setting{font-size:10px;font-weight:bold}.ontopanel-tree .tree-box-title{background-color:#d3d3d3}.ontopanel-tree .tree-box-content{font-size:14px;margin-top:3px}.ontopanel-tree .tree-content ul{list-style:none;padding-left:12px}.ontopanel-tree .tree-content li{margin:3px}.ontopanel-tree .tree-content hr{width:100%;border-top:1.5px solid #000;margin-bottom:3px}.ontopanel-tree .tree-content .ontoterm-btn{color:#d3d3d3;border:none;padding:0;cursor:pointer}.ontopanel-tree .tree-content .ontoterm-btn:hover{color:#4682b4}.ontopanel-tree .tree-content .collapse-btn{color:#d3d3d3;border:none;padding:0;cursor:pointer;margin-left:5px}.ontopanel-tree .tree-content .collapse-btn:hover{color:#4682b4}.ontopanel-tree .tree-content .match-error{display:none;font-size:13px;color:red;margin-left:8px}.ontopanel-tree .tree-content .tree-entity-box{display:none;white-space:normal;word-break:break-all;position:relative;z-index:10;border:1px solid #888;width:280px;max-height:200px;overflow:auto;padding:.5rem}.ontopanel-tree .tree-content .li-com{display:flex;white-space:nowrap;font-size:14px}.ontopanel-app{border:1px solid #000;height:500px;width:500px;background-color:#4682b4;font-size:16px;padding:5px;position:absolute}.ontopanel-sign{display:flex;height:40px;justify-content:space-between}.ontopanel-sign button{cursor:pointer;height:20px}.onto-button{cursor:pointer}.onto-button .ontopanel-menu{display:none;position:relative;z-index:3;background-color:#fefefe;width:80px;top:5px}.onto-button .ontopanel-menu .menu-tag{cursor:pointer;padding:8px 10px}.onto-button .ontopanel-menu .menu-tag:hover{background-color:gray}.ontopanel-box{position:absolute;z-index:5;left:0;top:0;width:100%;height:100%;background-color:rgba(0,0,0,.4)}.ontopanel-box .box-inner{background-color:#fefefe;margin:10% auto;padding:15px;border:1px solid #888;width:60%}.ontopanel-box .box-inner .box-close-span{color:#aaa;float:right;font-size:28px;font-weight:bold;cursor:pointer}.ontopanel-box .box-inner .box-close-span:hover{color:#000}.ontopanel-box .box-inner .ontopanel-form{height:100%}.ontopanel-box .box-inner .ontopanel-form h3{margin:0px}.ontopanel-box .box-inner .ontopanel-form .box-info{font-weight:bold}.ontopanel-box .box-inner .ontopanel-form div{margin-bottom:.5rem}.ontopanel-box .box-inner .ontopanel-form input{padding:.5rem;width:90%;background:#eee;border:1px solid #ddd;outline:none;border-radius:.2em}.ontopanel-box .box-inner .ontopanel-form button{font-size:15px;width:100%;height:30px;margin-bottom:.5rem;font-weight:bold;color:#fff;border:none;outline:none;cursor:pointer;border-radius:.2em;background:green}.ontopanel-box .box-inner .ontopanel-form a{font-size:13px;color:#4682b4;text-decoration:none;cursor:pointer}.ontopanel-box .box-inner .ontopanel-form p{margin:5px}",""]);const a=i},28:(e,t,o)=>{var n=o(379),l=o.n(n),r=o(795),i=o.n(r),a=o(569),s=o.n(a),d=o(565),p=o.n(d),c=o(216),u=o.n(c),h=o(589),m=o.n(h),y=o(431),g={};g.styleTagTransform=m(),g.setAttributes=p(),g.insert=s().bind(null,"head"),g.domAPI=i(),g.insertStyleElement=u();var b=l()(y.default,g);if(!y.default.locals||e.hot.invalidate){var f=!y.default.locals,v=f?y:y.default.locals;e.hot.accept(431,(t=>{y=o(431),function(e,t,o){if(!e&&t||e&&!t)return!1;var n;for(n in e)if((!o||"default"!==n)&&e[n]!==t[n])return!1;for(n in t)if(!(o&&"default"===n||e[n]))return!1;return!0}(v,f?y:y.default.locals,f)?(v=f?y:y.default.locals,b(y.default)):e.hot.invalidate()}))}e.hot.dispose((function(){b()})),y.default&&y.default.locals&&y.default.locals},684:(e,t,o)=>{let n=new class{constructor(){this.mesoNamespace=["base:https://purl.matolab.org/mseo/methods/example/","mid:https://purl.matolab.org/mseo/mid/","cco:http://www.ontologyrepository.com/CommonCoreOntologies/","obo:http://purl.obolibrary.org/obo/","pt:http://www.daml.org/2003/01/periodictable/PeriodicTable#","geo:http://www.opengis.net/ont/geosparql#"],this.ontoBank={"ontopanel-onto-extra-btn-MSEO":{}},this.setting=URI,this.currentCategoriesContent={title:null,categories:{Class:{name:"Class",content:null},ObjectProperty:{name:"ObjectProperty",content:null},DatatypeProperty:{name:"DatatypeProperty",content:null},Individual:{name:"Individual",content:null},AnnotationProperty:{name:"AnnotationProperty",content:null},Datatype:{name:"Datatype",content:null}},table:null}}modifyOntoBank=(e,t)=>{switch(t){case"reset":this.ontoBank={"ontopanel-onto-extra-btn-MSEO":{}};break;case"add":this.ontoBank[e[0]]=e[1];break;case"delete":delete this.ontoBank[e[0]]}};modifyCurrentCategoriesContent=(e,t,o)=>{switch(o){case"reset":this.currentCategoriesContent={title:"none",categories:{Class:{name:"Class",content:null},ObjectProperty:{name:"ObjectProperty",content:null},DatatypeProperty:{name:"DatatypeProperty",content:null},Individual:{name:"Individual",content:null},AnnotationProperty:{name:"AnnotationProperty",content:null},Datatype:{name:"Datatype",content:null}},table:null};break;case"selected":this.currentCategoriesContent.title=e,Object.keys(this.currentCategoriesContent.categories).forEach((e=>{this.currentCategoriesContent.categories[e].content=t[e]}));let o="ontopanel-onto-extra-btn-"+e;this.currentCategoriesContent.table=JSON.parse(n.ontoBank[o].onto_table.table)}};loadCurrentTable=(e,t="selected")=>{switch(t){case"selected":let o=e.onto_table.tree;this.modifyCurrentCategoriesContent(e.title,o,t);break;case"reset":this.modifyCurrentCategoriesContent(null,null,t)}document.getElementById("ontopanel-tree-title").innerHTML=`selected: ${this.currentCategoriesContent.title}`,console.log("load data"),document.getElementById("ontopanel-tree-class-btn").click()}};const l=class{constructor(e,t){this.app=e,this.data=t,this.init()}init(){this.btn=document.createElement("button"),this.btn.innerHTML='<div class="onto-button"> <div name="button-name" style="border:none">buttonname</div> <div class="ontopanel-menu" style="display:none"> <div class="menu-tag">Info</div> <div class="menu-tag">Update</div> <div class="menu-tag">Delete</div> </div> <div class="ontopanel-box" style="display:none"> <div class="box-inner"> <span class="box-close-span">&times;</span> <div name="info-detail" style="overflow:auto;font-size:15px;text-align:left;white-space:nowrap"></div> </div> </div> </div> ';let e=this.data.title;this.btn.querySelector('div[name="button-name"]').textContent=e;const t="ontopanel-onto-extra-btn-"+e;this.btn.id=t,n.modifyOntoBank([t,this.data],"add"),this.btn.onclick=e=>{e.preventDefault();let t=this.btn.id,o=n.ontoBank[t];n.loadCurrentTable(o)},this.btn.addEventListener("contextmenu",(e=>{e.preventDefault(),this.triggerMenu()})),this.btn.onmouseleave=e=>{e.preventDefault(),this.btn.querySelector(".ontopanel-menu").style.display="none"}}triggerMenu=()=>{let e=this.btn.querySelector(".ontopanel-menu"),t=e.children[0],o=e.children[1],n=e.children[2];e.style.display="block",o.onclick=t=>{t.preventDefault(),t.stopPropagation(),e.style.display="none",new r(this.app).updateTigger()},t.onclick=t=>{t.preventDefault(),t.stopPropagation(),e.style.display="none",this.showOntoInfo()},n.onclick=t=>{t.preventDefault(),t.stopPropagation(),e.style.display="none",this.deleteOnto()}};showOntoInfo=()=>{let e=this.btn.id,t=n.ontoBank[e].title,o=n.ontoBank[e].onto_source,l=n.ontoBank[e].date_created,r=this.btn.querySelector(".ontopanel-box");r.onclick=e=>{e.stopPropagation()};let i=this.btn.querySelector('div[name="info-detail"]');this.btn.querySelector(".box-close-span").onclick=()=>{r.style.display="none"},i.innerHTML=`\n      <h4>Info about this ontology:</h4>\n      <ul style="padding-left:20px">\n        <li><b>title</b>: ${t}</li>\n        <li><b>source</b>: ${o}</li>\n        <li><b>updated date</b>: ${l}</li>\n      </ul>\n      `,r.style.display="block"};deleteOnto=()=>{let e=this.btn.id,t=localStorage.getItem("loginUser"),o=n.ontoBank[e].id;t?(t=JSON.parse(t),fetch("https://ontopanel.herokuapp.com/api/v1/ontos/change/"+o,{method:"DELETE",headers:new Headers({Authorization:`Token ${t.token}`})}).then((t=>{t.ok?(n.ontoBank[e].title==n.currentCategoriesContent.title&&n.loadCurrentTable(null,"reset"),n.modifyOntoBank([e,null],"delete"),this.btn.remove(),this.handleInfoToggle("Deleted in your databank!","green")):t.json().then((e=>{let t=Object.keys(e)[0];this.handleInfoToggle(e[t],"red")}))})).catch((e=>{this.handleInfoToggle(e,"red")}))):(n.ontoBank[e].title==n.currentCategoriesContent.title&&n.loadCurrentTable(null,"reset"),n.modifyOntoBank([e,null],"delete"),this.btn.remove(),this.handleInfoToggle("Deleted locally","green"))};handleInfoToggle=(e,t)=>{let o=this.app.querySelector("#ontopanel-onto-menu-info");o.innerText=e,o.style.color=t,o.style.display="block",setTimeout((()=>{o.style.display="none"}),8e3)}},r=class{constructor(e){this.app=e,this.init()}init(){this.uploaderBox=document.createElement("div"),this.uploaderBox.innerHTML='<div class="ontopanel-box"> <div class="box-inner"> <span class="box-close-span">&times;</span> <form enctype="multipart/form-data" class="ontopanel-form"> <h3 style="margin:0">Uploader</h3> <br/> <div> <p>Please upload a file</p> <input type="file" name="formFile"/> </div> <div> <p>Or <br>Enter URL of raw data</p> <input type="url" name="formURL" placeholder="https://example.com"/> </div> <div> <p>And enter the ontology name</p> <input type="text" name="formName" placeholder="mseo" style="width:80px" maxlength="5" required="true"> </div> <div> <button type="submit" name="upload">Submit</button> <button type="submit" name="update" style="display:none">Update</button> <span name="form-info" style="display:none"></span> </div> </form> </div> </div>',this.uploaderBox.style.display="none",this.app.appendChild(this.uploaderBox);let e=this.uploaderBox.querySelector(".box-close-span"),t=this.uploaderBox.querySelector("form");this.ontoForm=t,e.onclick=()=>{this.ontoForm.reset(),this.uploaderBox.style.display="none"}}addTrigger=()=>{this.uploaderBox.style.display="block",console.log(this.uploaderBox);let e=this.ontoForm.querySelector('button[name="upload"]');this.updateOrAddBtn("add"),e.onclick=e=>{e.preventDefault(),this.ontoForm.checkValidity()?this.ontoAddFormToggle(this.ontoForm):this.ontoForm.reportValidity()}};updateTigger=e=>{this.uploaderBox.style.display="block";let t=this.ontoForm.querySelector('button[name="update"]');this.updateOrAddBtn("update"),t.onclick=t=>{t.preventDefault(),this.ontoForm.checkValidity()?this.ontoUpdateFormToggle(this.ontoForm,e):this.ontoForm.reportValidity()}};updateOrAddBtn=e=>{let t=this.ontoForm.querySelector('button[name="upload"]'),o=this.ontoForm.querySelector('button[name="update"]');t.style.display="add"===e?"block":"none",o.style.display="add"===e?"none":"block"};ontoAddFormToggle=e=>{let t=new FormData(e),o=t.get("formName").trim(),l=t.get("formFile"),r=t.get("formURL").trim(),i=this.ontoForm.querySelector('span[name="form-info"]');if(l.size||r)if(Object.keys(n.ontoBank).includes("ontopanel-onto-extra-btn-"+o))this.handleInfoToggle("this name is taken, use another one!","red");else{i.innerText="In process, please wait.",i.style.color="green",i.style.display="block";let e=localStorage.getItem("loginUser");e?this.ontoAddDB(t,e):this.ontoAddUpdateLocal(t)}else this.handleInfoToggle("Please enter File or URL!","red")};ontoAddUpdateLocal=(e,t=null,o="add")=>{fetch("https://ontopanel.herokuapp.com/api/v1/ontos/owltable/",{method:"POST",body:e}).then((e=>{e.ok?e.json().then((e=>{switch(o){case"add":let o=new l(this.app,e);this.app.querySelector("#ontopanel-onto-extra-btn").prepend(o.btn),this.handleInfoToggle("Succssfully added locally!","green");break;case"update":this.updateOntoBtn(e,t),this.handleInfoToggle("Succssfully updated locally!","green")}this.ontoForm.reset()})):e.json().then((e=>{let t=Object.keys(e)[0];this.handleInfoToggle(e[t],"red")}))})).catch((e=>{this.handleInfoToggle(e,"red")}))};ontoAddDB=(e,t)=>{t=JSON.parse(t),fetch("https://ontopanel.herokuapp.com/api/v1/ontos/lists/",{method:"POST",body:e,headers:new Headers({Authorization:`Token ${t.token}`})}).then((e=>{e.ok?e.json().then((e=>{let t=new l(this.app,e);this.app.querySelector("#ontopanel-onto-extra-btn").prepend(t.btn),this.handleInfoToggle("Succssfully added to your database!","green"),this.ontoForm.reset()})):e.json().then((e=>{let t=Object.keys(e)[0];this.handleInfoToggle(e[t],"red")}))})).catch((e=>{this.handleInfoToggle(e,"red")}))};ontoUpdateFormToggle=(e,t)=>{let o=this.ontoForm.querySelector('span[name="form-info"]'),l=new FormData(e),r=l.get("formName").trim(),i=l.get("formFile"),a=l.get("formURL").trim();if(i.size||a)if(Object.keys(n.OntoBank).filter((e=>e!==t)).includes("ontopanel-onto-extra-btn-"+r))this.handleInfoToggle("this name is taken, use another one!","red");else{o.innerText="In process, please wait.",o.style="color: green; display:block;";let e=localStorage.getItem("loginUser");e?this.ontoUpdateDB(l,t,e):this.ontoAddUpdateLocal(l,t,"update")}else this.handleInfoToggle("Please enter File or URL!","red")};updateOntoBtn=(e,t)=>{let o=this.app.querySelector("#"+t),l=e.title;o.innerText=l;const r="ontopanel-onto-extra-btn-"+l;o.id=r,n.modifyOntoBank([t,null],"delete"),n.modifyOntoBank([r,e],"add"),n.loadCurrentTable(e)};ontoUpdateDB=(e,t,o)=>{o=JSON.parse(o);let l=n.OntoBank[t].id;fetch("https://ontopanel.herokuapp.com/api/v1/ontos/change/"+l,{method:"PUT",body:e,headers:new Headers({Authorization:`Token ${o.token}`})}).then((e=>{e.ok?e.json().then((e=>{this.updateOntoBtn(e,t),this.handleInfoToggle("Succssfully updated in your databank!","green"),this.ontoForm.reset()})):e.json().then((e=>{let t=Object.keys(e)[0];this.handleInfoToggle(e[t],"red")}))})).catch((e=>{this.handleInfoToggle(e,"red")}))};handleInfoToggle=(e,t)=>{let o=this.uploaderBox.querySelector('span[name="form-info"]');o.innerText=e,o.style.color=t,o.style.display="block",setTimeout((()=>{o.style.display="none"}),8e3)}},i=(e,t,o,l,r)=>{let p=document.createElement("ul");return t.forEach((t=>{let c=o.cloneNode(!0),u=c.firstElementChild,h=u.children[0],m=u.children[1],y=u.children[2],g=u.children[3],b=m.children[0];b.innerHTML=t[0];let f=b.innerText;if("RDFLabel"===n.setting){let e=n.currentCategoriesContent.table[f].RDFLabel;if(e.length){let o=t[0].replace(f,e);b.innerHTML=o}}let v="li-term-"+f;if(b.id=v,b.onclick=e=>{e.preventDefault();let t=m.children[1],o=a(v,t);console.log(o),t.replaceWith(o),o.style.display="block",o.scrollIntoView({block:"nearest",inline:"center"}),c.onmouseleave=e=>{o.style.display="none"}},y.onclick=t=>{let o=b.innerText;s(o,v,e,l,t)},g.onclick=t=>{try{let t=b.innerText;d(t,v,e)}catch(e){let t=r.querySelector(".match-error");t.innerText=e,t.style.display="block",setTimeout((()=>{t.style.display="none"}),8e3)}},p.appendChild(c),t[1].length){h.innerText="⊖",h.style="cursor:pointer; margin-right:1px;",h.setAttribute("name","li-collapse-btn");let n=i(e,t[1],o,l,r);c.appendChild(n),h.onclick=e=>{let t=e.target,o=e.target.parentElement.nextElementSibling;"⊖"===e.target.innerText?(o.style.display="none",t.innerText="⊕"):(o.style.display="block",t.innerText="⊖")}}else h.innerHTML="--",h.style="color:grey;margin-right:1px;",u.prepend(h)})),p},a=(e,t)=>{let o=t.cloneNode(!0),l=e.replace("li-term-",""),r=n.currentCategoriesContent.table[l];return o.querySelector('div[name="entity-IRI"]').innerText=l+" ("+r.EntityIRI+")",o.querySelector('div[name="entity-label"]').innerText=r.RDFLabel?r.RDFLabel:"none",o.querySelector('div[name="entity-color"]').innerText=r.Color,o.querySelector('div[name="entity-annos"]').innerHTML=p(r.Annotations).innerHTML,o.querySelector('div[name="entity-special"]').innerHTML=p(r.SpecialInfo).innerHTML,o.onclick=e=>{e.stopPropagation()},o},s=(e,t,o,l,r)=>{let i=t.replace("li-term-",""),a=0,s=n.currentCategoriesContent.table[i],d=s.BelongsTo,p=s.Color,c=e;switch(d){case"Class":let e;e="none"===p?"rounded=0;whiteSpace=wrap;html=1;":`rounded=0;whiteSpace=wrap;html=1;fillColor=${p};`;var u=new mxCell(c,new mxGeometry(0,0,90,26),e),m=c.length,y=o.editor.graph.getPreferredSizeForCell(u);u.geometry.width=y.width+m,u.vertex=!0,a=y.width+m+30;break;case"ObjectProperty":u=new mxCell(c,new mxGeometry(0,0,90,26),"endArrow=classic;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=0;entryY=0.5;entryDx=0;entryDy=0;endSize=8;arcSize=0;"),m=c.length,u.geometry.setTerminalPoint(new mxPoint(0,0),!0),u.geometry.setTerminalPoint(new mxPoint(8*m+20,0),!1),u.edge=!0,a=8*m+20+30;break;case"DatatypeProperty":u=new mxCell(c,new mxGeometry(0,0,0,0),"edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;fontSize=12;"),m=c.length,u.geometry.setTerminalPoint(new mxPoint(0,0),!0),u.geometry.setTerminalPoint(new mxPoint(8*m+20,0),!1),u.edge=!0,a=8*m+20+30;break;case"Individual":u=new mxCell("<u>"+c+"</u>",new mxGeometry(0,0,90,26),"rounded=0;whiteSpace=wrap;html=1;"),m=c.length,y=o.editor.graph.getPreferredSizeForCell(u),u.geometry.width=y.width+m,u.vertex=!0,a=y.width+m+30;break;case"Datatype":u=new mxCell(c,new mxGeometry(0,0,90,26),"rounded=0;whiteSpace=wrap;html=1;fillColor=#FF8C00;"),m=c.length,y=o.editor.graph.getPreferredSizeForCell(u),u.geometry.width=y.width+m,u.vertex=!0,a=y.width+m+30;break;case"AnnotationProperty":u=new mxCell(c,new mxGeometry(0,0,0,0),"rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;endArrow=diamond;endFill=1;strokeWidth=1;"),m=c.length,u.geometry.setTerminalPoint(new mxPoint(0,0),!0),u.geometry.setTerminalPoint(new mxPoint(8*m+20,0),!1),u.edge=!0,a=8*m+20+30}let g={label:e,Type:d,IRI:s.EntityIRI},b=h(g),f=o.editor.graph;f.getModel().setValue(u,b);let v=mxUtils.convertPoint(f.container,l.getX(),l.getY()),x=mxUtils.convertPoint(f.container,mxEvent.getClientX(r),mxEvent.getClientY(r)),w=f.view.translate,k=f.view.scale,C=v.x/k-w.x-a,S=x.y/k-w.y;const T=[u];f.importCells(T,C,S)},d=(e,t,o)=>{let l=t.replace("li-term-",""),r=n.currentCategoriesContent.table[l],i=r.BelongsTo,a=r.Color,s=o.editor.graph.getSelectionCells();s&&s.forEach((t=>{if("object"==typeof t.value){let n=t.getAttribute("label",null),l=t.getAttribute("Type",null);if(l){let s=/(\(.*\))/g,d=t.style,p=u(t,a),m=l.replace(s,"").trim().toLowerCase();switch(i.toLowerCase()){case"datatype":if("datavalue"===m){let n={label:`"value"^^${e}`,Type:l,IRI_DT:r.EntityIRI},i=h(n);o.editor.graph.model.setStyle(t,p),o.editor.graph.model.setValue(t,i)}else if("datatype"===m){let n={label:e,Type:l,IRI:r.EntityIRI},i=h(n);o.editor.graph.model.setStyle(t,p),o.editor.graph.model.setValue(t,i)}else{if("datatypeproperty"!=m||d.includes("rhombus")|t.isEdge())throw"The selected shape is not a datavalue or datatype or datatypeproperty(asseration)!";{let i=t.getAttribute("IRI_DP",null),a=n.split("~")[0]+"~"+e;l=l.replace("NoRange","YesRange");let s={label:a,Type:l,IRI_DP:i,IRI_DT:r.EntityIRI},d=h(s);o.editor.graph.model.setValue(t,d)}}break;case"datatypeproperty":if("datatypeproperty"!==m)throw"The selected shape is not a datatypeproperty!";if(d.includes("rhombus")|t.isEdge()){let i={label:c(n,e),Type:l,IRI:r.EntityIRI},a=h(i);o.editor.graph.model.setStyle(t,p),o.editor.graph.model.setValue(t,a)}else{let i=n.split("~")[0],a=c(i,e),s=n.replace(i,a),d=t.getAttribute("IRI_DT",null),u={label:s,Type:l,IRI_DP:r.EntityIRI,IRI_DT:d},m=h(u);o.editor.graph.model.setStyle(t,p),o.editor.graph.model.setValue(t,m)}break;default:if(i.toLowerCase()!==m)throw`The selected shape is not a ${i}!`;{let i=c(n,e);"individual"===m&&(i="<u>"+i+"</u>");let a={label:i,Type:l,IRI:r.EntityIRI},s=h(a);o.editor.graph.model.setStyle(t,p),o.editor.graph.model.setValue(t,s)}}}}}))},p=e=>{let t=document.createElement("div");return Object.keys(e).length?Object.keys(e).forEach((o=>{if(e[o].length){let n=document.createElement("div"),l=document.createElement("div"),r=document.createElement("hr");l.innerText=o,l.style.color="steelblue",l.style.marginBottom="3px";let i=document.createElement("div");i.innerText=e[o].join("\n"),r.style.borderTop="0.5px dotted #333",r.style.margin="5px 0px 5px 0px",n.append(l,i,r),t.appendChild(n)}})):t.innerText="none",t},c=(e,t)=>{let o=document.createElement("div");o.innerHTML=e,console.log(e);let n=o.textContent||o.innerText||"";console.log(n);let l=n.replace(/([<<|\(].*[>>|\)])/g,"").trim(),r=n.replace(l,t),i=document.createElement("div");return i.innerText=r,i.innerHTML},u=(e,t)=>{let o="none"===t?"#FFFFFF":t;return e.style.split(";").filter((e=>!e.includes("fillColor"))).join(";")+`fillColor=${o};`},h=e=>{let t=mxUtils.createXmlDocument().createElement("object");for(let[o,n]of Object.entries(e))t.setAttribute(o,n);return t};o(28),o(524);let m=new class{constructor(){this.errors=null,this.result=null,this.mappingData=null}modifyData=e=>{this.errors=e.errors,this.result=e.result};resetData=()=>{this.errors=null,this.result=null,this.mappingData=null};uploadMappingData=e=>{this.mappingData=e}};const y=(e,t,o)=>{let n=document.createElement("li");return n.id=e,n.innerHTML=`\n    <div><b>ID: </b>${e}</div> \n    <div><b>Error: </b>${t}</div>\n    `,n.onclick=t=>{t.preventDefault();let n=o.editor.graph,l=n.getModel().getCell(e);n.clearSelection(),n.setSelectionCell(l),n.scrollCellToVisible(l,!0)},n},g=e=>{let t=mxUtils.createXmlDocument().createElement("object");for(let[o,n]of Object.entries(e))t.setAttribute(o,n);return t},b=e=>{let t=e.value;if(!t){let o=e.children;if(o)for(let e=0;e<o.length;e++){let n=o[e];if((n.style.includes("text")||n.style.includes("edgeLabel"))&&n.value){t="string"==typeof n.value?n.value:"";break}}}return t},f=e=>{var t=document.createElement("div");t.id="convertor-app",t.style="height: 400px; width: 380px; font-size: 15px; padding: 5px; ",t.innerHTML='<div class="convertor-container"> <div class="transformer"> <div>If you used the chowlk libary, please transform first.</div> <input type="button" name="transform" value="transform"/> </div> <div class="convertor-bar"> <select name="rdf-format"> <option value="application/rdf+xml">rdf/xml</option> <option value="turtle">turtle</option> </select> <input type="button" name="convert" value="Convert"/> </div> <div class="convertor-show"> <div class="convertor-btn-group"> <input type="button" name="mapping" value="Mapping"/> <input type="button" name="result" value="Result"/> <input type="button" name="show-error" value="ShowError"/> <input type="button" value="&#x2193;" style="width:30px;background-color:#dc143c" name="download"/> </div> <div class="convertor-content"> <div></div> </div> </div> </div> ',t.addEventListener("contextmenu",(e=>e.preventDefault())),mxUtils.br(t),mxResources.parse("convertor=Ontopanel-convertor");var o=new mxWindow(mxResources.get("convertor"),t,document.body.offsetWidth-420,140,390,420,!0,!0);o.destroyOnClose=!1,o.setMaximizable(!1),o.setResizable(!1),o.setClosable(!0),o.setVisible(!0);let n=t.querySelector('input[name="convert"]'),l=t.querySelector('input[name="transform"]'),r=t.querySelector('input[name="mapping"]'),i=t.querySelector('input[name="result"]'),a=t.querySelector('input[name="show-error"]'),s=t.querySelector(".convertor-content"),d=t.querySelector('input[name="download"]');return r.onclick=e=>{let t=(()=>{let e=document.createElement("div");return e.innerHTML='<div class="mapping-tool"> <form action="multipart/form-data"> <input type="file" id="myfile" name="myFile" required style="max-width:190px"/> <select name="filetype"> <option value="csv">csv</option> <option value="excel">excel</option> <option value="json">json</option> </select> <select name="decimal"> <option value=",">,</option> <option value=";">.</option> </select> <select name="csv-seperator"> <option value=",">,</option> <option value=";">;</option> </select> <input type="submit" name="submit"/> </form> <div>under development</div> </div> ',e})();s.firstElementChild.replaceWith(t)},i.onclick=e=>{let t=document.createElement("pre");t.textContent=m.result,s.firstElementChild.replaceWith(t)},a.onclick=t=>{if(m.errors){let t=((e,t)=>{let o=e.other_errors,n=e.edge_errors,l=e.node_errors,r=e.relation_errors,i=document.createElement("div");if(i.innerHTML='<div class="error-list"> <div name="other" style="display:none"> <div class="error-type">General Errors</div> <ul></ul> <hr/> </div> <div name="node" style="display:none"> <div class="error-type">Node Errors</div> <ul></ul> <hr/> </div> <div name="edge" style="display:none"> <div class="error-type">Edge Errors</div> <ul></ul> <hr/> </div> <div name="relation" style="display:none"> <div class="error-type">Relation Errors</div> <ul></ul> <hr/> </div> </div> ',o.length){let e=i.querySelector('div[name="other"]'),n=e.querySelector("ul");o.forEach((e=>{let o=e.id,l=e.message,r=y(o,l,t);n.appendChild(r)})),e.style.display="block"}if(n.length){let e=i.querySelector('div[name="edge"]'),o=e.querySelector("ul");n.forEach((e=>{let n=e.id,l=e.message,r=y(n,l,t);o.appendChild(r)})),e.style.display="block"}if(l.length){let e=i.querySelector('div[name="node"]'),o=e.querySelector("ul");l.forEach((e=>{let n=e.id,l=e.message,r=y(n,l,t);o.appendChild(r)})),e.style.display="block"}if(r.length){let e=i.querySelector('div[name="relation"]'),o=e.querySelector("ul");r.forEach((e=>{let n=((e,t,o)=>{let n=document.createElement("li"),l="["+e.join(",")+"]";return n.innerHTML=`\n    <div><b>ID List: </b>${l}</div> \n    <div><b>Error: </b>${t}</div>\n    `,n.onclick=t=>{t.preventDefault();let n=o.editor.graph,l=n.getModel(),r=e.map((e=>l.getCell(e)));n.clearSelection(),n.setSelectionCells(r),n.scrollCellToVisible(r[1],!0)},n})(e.id_list,e.message,t);o.appendChild(n)})),e.style.display="block"}return i})(m.errors,e);s.firstElementChild.replaceWith(t)}},d.onclick=e=>{if(m.result){let e=document.createElement("a");e.setAttribute("href","data:application/xml;charset=utf-8,"+encodeURIComponent(m.result)),e.setAttribute("download","file.xml"),t.appendChild(e),e.click(),t.removeChild(e)}},l.onclick=t=>{((e,t)=>{let o=e.editor.graph,n=o.getDefaultParent(),l=o.getGraphBounds(),r=o.getCells(l.x,l.y,l.width,l.height,n,null,null,null,!0),i={},a=r.filter((e=>e.isVertex())),s={node_errors:[],edge_errors:[],other_errors:[],relation_errors:[]};a.forEach((e=>{if("object"==typeof e.value);else{let t={},[n,l]=(e=>{let t=e.style,o=b(e),n=null,l=document.createElement("div");l.innerHTML=o;let r=l.innerText,i={"⨅":"IntersectionOf",intersectionOf:"IntersectionOf","⨆":"UnionOf",unionOf:"UnionOf","≡":"EquivalentClass","⊥":"DisjointClass"};return t.includes("shape=note")?n="Namespace":t.includes("shape=document")?n="Metadata":t.includes("shape=parallelogram")?n="CustomDatatype":t.includes("shape=hexagon")?r.includes("AllDifferent")&&(n="AllDifferent"):t.includes("ellipse")?Object.keys(i).forEach((e=>{r.includes(e)&&(n=i[e])})):t.includes("rhombus")?r.includes("owl:ObjectProperty")?n="ObjectProperty":r.includes("owl:DatatypeProperty")&&(n="DatatypeProperty"):t.includes("edgeLabel")||t.includes("text")?n="pass":t.includes("rounded=0")&&(o.includes("</u>")||t.includes("fontStyle=4")?n="Individual":r.includes("^^")||r.includes("@")?n="DataValue":t.includes("dashed=1")||(n="Class")),[n,o]})(e);if(n&&"pass"!==n){t={label:l,Type:n};let r=g(t);o.model.setValue(e,r),i[e.id]=n}else"pass"!==n&&s.node_errors.push({id:e.id,message:"not recongized, please use the ontopanel libary to repalce it."})}let n={result:"Transformer can wrongly convert the following:\nnodes: nodes in rectangle shapes, \nedges: edges without labels.\n\nYou cant click ShowError to check the errors, but maybe not all the errors are catched.\nPlease use the ontopanel-libary shapes to replace the errors.\nHowever, it usually will not be a problem if you could not correct all the errors, because convertor will check the errors again.",errors:s};m.modifyData(n),t.click()})),r.filter((e=>e.isEdge())).forEach((e=>{if("object"==typeof e.value);else{let t={},[n,l]=((e,t)=>{let o=e.style,n=e.target,l=e.source,r=b(e),i=null,a=document.createElement("div");a.innerHTML=r;let s=a.innerText,d={"rdfs:subClassOf":"SubClassOf","rdf:type":"RDFType","owl:equivalentClass":"EquivalentClass","owl:disjointWith":"DisjointClass","owl:complementOf":"ComplementOf","rdfs:subPropertyOf":"SubPropertyOf","owl:equivalentProperty":"EquivalentProperty","owl:inverseOf":"InverseOf","rdfs:domain":"Domain","rdfs:range":"Range","owl:sameAs":"SameAs","owl:differentFrom":"DifferentFrom"};return r&&0!==r.length||(r="",o.includes("endArrow=block")||o.includes("startArrow=block")?i="SubClassOf":(o.includes("endArrow=open")||o.includes("startArrow=open"))&&(i="Connector",l&&l.id in t)&&"Individual"===t[l.id]&&(i="RDFType")),Object.keys(d).forEach((e=>{s.includes(e)&&(i=d[e])})),!i&&(i="ObjectProperty",n&&n.id in t)&&"DataValue"===t[n.id]&&(i="DatatypeProperty"),[i,r]})(e,i);if(n&&"pass"!==n){t={label:l,Type:n};let r=g(t);o.model.setValue(e,r)}}}))})(e,i)},n.onclick=o=>{o.preventDefault(),m.resetData();let n=(e=>{let t=e.editor.graph,o=t.getDefaultParent(),n=t.getGraphBounds(),l=t.getCells(n.x,n.y,n.width,n.height,o,null,null,null,!0),r={},i={},a={node_errors:[],edge_errors:[],relation_errors:[],other_errors:[]};return l.forEach((e=>{let t=e.style;if("object"==typeof e.value){let o=e.getAttribute("Type",null);if(o){let n=e.id,l=e.source?e.source.id:"none",a=e.target?e.target.id:"none",s=e.geometry?{...e.geometry}:"none",d=e.value.attributes,p=d.label.value.trim(),c={};for(let e=0;e<d.length;e++){let t=d[e],o=t.name.trim();"label"!==o&&"Type"!==o&&(c[o]=t.value.trim())}let u=Object.keys(c).length?c:"none";if(e.isEdge()){if(!p){let t=e.children;if(t)for(let e=0;e<t.length;e++){let o=t[e];if((o.style.includes("text")||o.style.includes("edgeLabel"))&&o.value){p="string"==typeof o.value?o.value:"";break}}}i[n]={type:o,style:t,label:p,source:l,target:a,objectData:u}}else r[n]={type:o,style:t,label:p,geometry:s,objectData:u}}else{let t={id:e.id,message:"this shape is not from ontopanel-libary, please use libary or transform."};a.other_errors.push(t)}}else if(t.includes("text")||t.includes("edgeLabel"));else{let t={id:e.id,message:"this shape is not from ontopanel-libary, please use libary or transform."};a.other_errors.push(t)}})),JSON.stringify({nodes:r,edges:i,errors:a}),{nodes:r,edges:i,errors:a}})(e),l={format:t.querySelector("select").value,data:n};fetch("https://ontopanel.herokuapp.com/api/v1/convertor/",{method:"POST",body:JSON.stringify(l),headers:new Headers({"Content-Type":"application/json"})}).then((e=>{e.ok?e.json().then((e=>{m.modifyData(e),i.click()})):e.json().then((e=>{let t={result:e,errors:null};m.modifyData(t),i.click()}))})).catch((e=>{let t={result:text,errors:null};m.modifyData(t),i.click()}))},o};Draw.loadPlugin((function(e){let t=(e=>{var t=document.createElement("div");t.id="ontopanel-app",t.style="height: 450px; width: 380px; font-size: 15px; padding: 5px; ",t.innerHTML='<div id="ontopanel-container" class="ontopanel-sign"> <div id="ontopanel-sign-info">Current user:</div> <div style="display:flex"> <button id="ontopanel-signup-btn">SignUp</button> <button id="ontopanel-login-btn">Login</button> <button id="ontopanel-logout-btn" style="display:none">Logout</button> </div> </div> <div id="ontopanel-onto-btngroup" style="display:flex;height:40px"> <div style="display:flex;height:30px" id="ontopanel-onto-extra-btn"></div> <div style="display:flex;height:30px"> <button id="ontopanel-onto-extra-btn-MSEO" style="cursor:pointer"> MSEO </button> <button id="ontopanel-onto-add-btn" style="cursor:pointer">+</button> <p id="ontopanel-tree-title" style="margin:5px 0 0 30px;font-size:18px;font-weight:700"> selected: none </p> <button id="ontopanel-namespace-btn" style="border:1px soild #000;margin:5px 0 0 5px;cursor:pointer;height:20px"> ⇱ prefix </button> </div> </div> <div id="ontopanel-onto-menu-info" style="display:none"></div> <div id="ontopanel-tree-container" class="ontopanel-tree"> <div style="display:flex;height:30px"> <select class="ontopanel-setting"> <option value="URI">URI</option> <option value="RDFLabel">RDFLabel</option> </select> <button id="ontopanel-tree-class-btn">Class</button> <button id="ontopanel-tree-op-btn">OP</button> <button id="ontopanel-tree-dp-btn">DP</button> <button id="ontopanel-tree-ind-btn">Ind</button> <button id="ontopanel-tree-ap-btn">AP</button> <button id="ontopanel-tree-dt-btn">DT</button> <input id="ontopanel-search-term" style="margin-left:20px" placeholder="search entity"/> </div> <div id="onto-tree-content"> <div>treeshowhere</div> </div> </div> ',t.addEventListener("contextmenu",(e=>e.preventDefault())),mxUtils.br(t),mxResources.parse("ontopanel=Ontopanel");var o=new mxWindow(mxResources.get("ontopanel"),t,document.body.offsetWidth-480,140,390,480,!0,!0);o.destroyOnClose=!1,o.setMaximizable(!1),o.setResizable(!1),o.setClosable(!0),o.setVisible(!0);let a=t.querySelector("#ontopanel-onto-add-btn"),s=new r(t);a.onclick=e=>{e.preventDefault(),s.addTrigger()};let d=new class{constructor(e){this.app=e,this.init()}init=()=>{let e=document.createElement("div");e.innerHTML='<div id="ontopanel-sign-box" class="ontopanel-box"> <div class="box-inner"> <span class="box-close-span">&times;</span> <form id="ontopanel-signup-form" class="ontopanel-form"> <h3>Sign Up</h3> <p class="box-info"></p> <div> <input type="text" name="signEmail" autofocus placeholder="Email Address" required/> </div> <div> <input type="password" name="signPsw" autofocus placeholder="Password" pattern="[A-Za-z0-9]+" required title="Only number or letter are accepted"/> </div> <div> <input type="password" name="signPsw-repeat" autofocus placeholder="Confirm password" pattern="[A-Za-z0-9]+" required title="Only number or letter are accepted"/> </div> <button type="submit">Sign Up</button> <p style="text-align:center"> <a>Already have an account? Sign in</a> </p> </form> <form id="ontopanel-login-form" class="ontopanel-form"> <h3>Login</h3> <p class="box-info"></p> <div> <input type="text" placeholder="Email Address" autofocus name="loginEmail" required/> </div> <div> <input type="password" placeholder="Password" autofocus name="loginPsw" required/> </div> <button type="submit">Login</button> <p style="text-align:center"> <a id="ontopanel-reset-password-link">Forgot your password?</a> <br/> <a id="ontopanel-sign-link">Don\'t have an account? Create account</a> </p> </form> </div> </div> <div id="ontopanel-reset-password-box" class="ontopanel-box"> <div class="box-inner"> <span class="box-close-span">&times;</span> <div> <form id="ontopanel-reset-password-form" class="ontopanel-form"> <h3>Send email</h3> <h5 style="margin:2px">Send email first to get secret key.</h5> <p class="box-info"></p> <div> <input type="text" placeholder="Email Address" autofocus name="resetEmail" required/> </div> <button type="submit">Send email</button> </form> <hr/> <form id="ontopanel-reset-password-confirm-form" class="ontopanel-form"> <h3>Reset password confirm</h3> <h5 style="margin:2px"> Enter secret key below to reset your password. </h5> <p class="box-info"></p> <div> <input type="text" placeholder="Secrect key" autofocus name="secretKey" required/> </div> <div> <input type="password" placeholder="New password" autofocus name="resetPsw" required/> </div> <div> <input type="password" placeholder="Confirm new password" autofocus name="resetPsw-con" required/> </div> <button type="submit">Confirm</button> </form> </div> </div> </div> ',this.app.appendChild(e),e.querySelectorAll(".box-close-span").forEach((e=>{e.onclick=()=>{let t=e.parentNode.parentNode;t.style.display="none",t.querySelectorAll("form").forEach((e=>{e.querySelector(".box-info").innerText="",e.reset()}))}})),this.signLoginBox=e.querySelector("#ontopanel-sign-box"),this.signLoginBox.style.display="none",this.resetPasswordBox=e.querySelector("#ontopanel-reset-password-box"),this.resetPasswordBox.style.display="none";let t=localStorage.getItem("loginUser");t&&(t=JSON.parse(t),this.downloadOnto(t.token,t.email))};signUp=()=>{this.signLoginBox.style.display="block";let e=this.signLoginBox.querySelector("#ontopanel-signup-form"),t=this.signLoginBox.querySelector("#ontopanel-login-form");e.style.display="block",t.style.display="none",e.querySelector(".box-info").innerText="",e.reset(),e.onsubmit=e=>{e.preventDefault();let t=new FormData(e.target);this.validateSignUp(t)},e.querySelector("a").onclick=e=>{e.preventDefault(),this.login()}};login=()=>{this.signLoginBox.style.display="block";let e=this.signLoginBox.querySelector("#ontopanel-signup-form"),t=this.signLoginBox.querySelector("#ontopanel-login-form");e.style.display="none",t.style.display="block",t.querySelector(".box-info").innerText="",t.reset(),t.onsubmit=e=>{e.preventDefault();let t=new FormData(e.target);this.validateLogin(t)},t.querySelector("#ontopanel-sign-link").onclick=e=>{e.preventDefault(),this.signUp()},t.querySelector("#ontopanel-reset-password-link").onclick=e=>{e.preventDefault(),this.resetPasswordBox.style.display="block",this.resetPassword()}};logout=()=>{if(this.handleLogout(),localStorage.getItem("loginUser")){let e=JSON.parse(localStorage.getItem("loginUser")).token;localStorage.removeItem("loginUser"),fetch("https://ontopanel.herokuapp.com/api/v1/user/logout/",{method:"GET",headers:new Headers({"Content-Type":"application/json",Authorization:`Token ${e}`})})}};resetPassword=()=>{this.resetPasswordBox.style.display="block";let e=this.resetPasswordBox.querySelector("#ontopanel-reset-password-form"),t=this.resetPasswordBox.querySelector("#ontopanel-reset-password-confirm-form");e.onsubmit=e=>{e.preventDefault();let t=new FormData(e.target);this.resetPasswordToggle(t)},t.onsubmit=e=>{e.preventDefault();let t=new FormData(e.target);this.resetPasswordConfirmToggle(t)}};validateSignUp=e=>{let t=e.get("signEmail").trim(),o=e.get("signPsw").trim(),n=e.get("signPsw-repeat").trim(),l=this.signLoginBox.querySelector("#ontopanel-signup-form"),r=l.querySelector(".box-info");if(n!==o)this.handleFormInfo(r,"Passwords are not equal.");else{let e={email:t,password:o};fetch("https://ontopanel.herokuapp.com/api/v1/user/register/",{method:"POST",body:JSON.stringify(e),headers:new Headers({"Content-Type":"application/json"})}).then((e=>{e.ok?(this.handleFormInfo(r,"Sign Up successfully. Please login in.","green"),setTimeout((()=>{this.login(),l.reset()}),3e3)):e.json().then((e=>{let t=Object.keys(e)[0];this.handleFormInfo(r,e[t])}))})).catch((e=>{this.handleFormInfo(r,e)}))}};validateLogin=e=>{let t=this.signLoginBox.querySelector("#ontopanel-login-form"),o=t.querySelector(".box-info"),n={username:e.get("loginEmail").trim(),password:e.get("loginPsw").trim()};fetch("https://ontopanel.herokuapp.com/api/v1/user/login/",{method:"POST",body:JSON.stringify(n),headers:new Headers({"Content-Type":"application/json"})}).then((e=>{e.ok?e.json().then((e=>{localStorage.setItem("loginUser",JSON.stringify(e)),this.resetAll(),this.downloadOnto(e.token,e.email),this.handleFormInfo(o,"Login successfully.","green"),setTimeout((()=>{t.reset(),this.signLoginBox.style.display="none"}),1e3)})):e.json().then((e=>{let t=Object.keys(e)[0];this.handleFormInfo(o,e[t])}))})).catch((e=>{this.handleFormInfo(o,e)}))};downloadOnto=(e,t)=>{let o=this.app.querySelector("#ontopanel-sign-info");fetch("https://ontopanel.herokuapp.com/api/v1/ontos/lists/",{method:"GET",headers:new Headers({"Content-Type":"application/json",Authorization:`Token ${e}`})}).then((e=>{e.ok?e.json().then((e=>{e.forEach((e=>{let t=new l(this.app,e);this.app.querySelector("#ontopanel-onto-extra-btn").prepend(t.btn)})),o.innerText=`Current user: ${t}`,this.isLoggedIn(!0)})):e.json().then((e=>{o.innerText="Please login again",this.isLoggedIn(!1)}))})).catch((e=>{o.innerText="Please login again",this.isLoggedIn(!1)}))};resetPasswordToggle=e=>{let t=e.get("resetEmail").trim();var o=this.resetPasswordBox.querySelector("#ontopanel-reset-password-form .box-info");fetch("https://ontopanel.herokuapp.com/api/v1/user/reset_password/",{method:"POST",body:JSON.stringify({email:t}),headers:new Headers({"Content-Type":"application/json"})}).then((e=>{e.ok?e.json().then((e=>{let t=Object.keys(e)[0];this.handleFormInfo(o,e[t],"green")})):e.json().then((e=>{let t=Object.keys(e)[0];this.handleFormInfo(o,e[t])}))})).catch((e=>{this.handleFormInfo(o,e)}))};resetPasswordConfirmToggle=e=>{let t=e.get("secretKey").trim(),o=e.get("resetPsw").trim(),n=e.get("resetPsw-con").trim(),l=this.resetPasswordBox.querySelector("#ontopanel-reset-password-confirm-form .box-info");o!==n?this.handleFormInfo(l,"Passwords are not equal!"):fetch("https://ontopanel.herokuapp.com/api/v1/user/reset_password_confirm/",{method:"PATCH",body:JSON.stringify({secret_key:t,password:o}),headers:new Headers({"Content-Type":"application/json"})}).then((e=>{e.ok?e.json().then((e=>{let t=Object.keys(e)[0];this.handleFormInfo(l,e[t],"green"),setTimeout((()=>{this.login()}),3e3)})):e.json().then((e=>{let t=Object.keys(e)[0];this.handleFormInfo(l,e[t])}))})).catch((e=>{this.handleFormInfo(l,e)}))};resetAll=()=>{this.app.querySelector("#ontopanel-onto-extra-btn").innerText="",this.app.querySelector("#ontopanel-sign-info").innerText="",n.modifyOntoBank([],"reset"),n.loadCurrentTable(null,"reset")};handleLogout=()=>{this.isLoggedIn(!1),this.resetAll()};isLoggedIn=e=>{let t=this.app.querySelector("#ontopanel-login-btn");this.app.querySelector("#ontopanel-logout-btn").style.display=e?"block":"none",t.style.display=e?"none":"block"};handleFormInfo=(e,t,o="red")=>{e.style.color=o,e.textContent=t}}(t);t.querySelector("#ontopanel-signup-btn").onclick=e=>{e.preventDefault(),d.signUp()},t.querySelector("#ontopanel-login-btn").onclick=e=>{e.preventDefault(),d.login()},t.querySelector("#ontopanel-logout-btn").onclick=e=>{e.preventDefault(),d.logout()};let p=t.querySelector("#onto-tree-content");const c={"ontopanel-tree-class-btn":"Class","ontopanel-tree-op-btn":"ObjectProperty","ontopanel-tree-dp-btn":"DatatypeProperty","ontopanel-tree-ind-btn":"Individual","ontopanel-tree-ap-btn":"AnnotationProperty","ontopanel-tree-dt-btn":"Datatype"};Object.keys(c).forEach((l=>{t.querySelector("#"+l).onclick=l=>{let r=n.currentCategoriesContent.categories[c[l.target.id]],a=p.firstElementChild;if(r.content){let l=new class{constructor(e,t,o,n){this.app=e,this.ui=t,this.wnd=o,this.data=n,this.init()}init(){let e=document.createElement("div");e.innerHTML='<div class="tree-content"> <div style="display:flex;margin:8px 0 0 10px;font-size:17px"> <div name="cate-name">entitycate</div> <div class="collapse-btn" style="margin-left:10px">&#8853;</div> <div class="collapse-btn">&#8854;</div> </div> <div class="match-error"></div> <hr/> <div style="height:300px;overflow:auto"> <div id="ontopanel-tree-entity">tree entity</div> </div> </div> <li> <div class="li-com"> <div>--</div> <div> <div name="li-term-text">entityText</div> <div class="tree-entity-box"> <div class="tree-box-title">IRI:</div> <div name="entity-IRI" class="tree-box-content"></div> <hr/> <div class="tree-box-title">RDF label:</div> <div name="entity-label" class="tree-box-content"></div> <hr/> <div class="tree-box-title">Annotations:</div> <div name="entity-annos" class="tree-box-content"></div> <hr/> <div class="tree-box-title">SpecialInfo:</div> <div name="entity-special" class="tree-box-content"></div> <hr/> <div class="tree-box-title">Color:</div> <div name="entity-color" class="tree-box-content"></div> </div> </div> <div class="ontoterm-btn" style="margin-left:5px">▲</div> <div class="ontoterm-btn">R</div> </div> </li> ',this.treeContent=e.querySelector(".tree-content"),this.treeContent.querySelector('div[name="cate-name"]').textContent=this.data.name;let t=this.treeContent.querySelectorAll(".collapse-btn")[0],o=this.treeContent.querySelectorAll(".collapse-btn")[1],n=this.app.querySelector("#ontopanel-search-term");t.onclick=e=>{e.preventDefault(),this.collpaseAll()},o.onclick=e=>{e.preventDefault(),this.foldAll()},n.onkeyup=e=>{e.preventDefault();let t=n.value.trim().toUpperCase();this.search(t)};let l=e.querySelector("li"),r=this.treeContent.querySelector("#ontopanel-tree-entity"),a=this.data.content,s=i(this.ui,a,l,this.wnd,this.treeContent);r.replaceWith(s)}foldAll=()=>{let e=this.treeContent.querySelectorAll("ul >li");[...this.treeContent.querySelectorAll('[name="li-collapse-btn"]')].forEach((e=>{e.innerText="⊕"})),e.forEach((e=>{[...e.getElementsByTagName("ul")].forEach((e=>{e.style.display="none"}))}))};collpaseAll=()=>{let e=[...this.treeContent.querySelectorAll('[name="li-collapse-btn"]')],t=[...this.treeContent.getElementsByTagName("ul")];e.forEach((e=>{e.innerText="⊖"})),t.forEach((e=>e.style.display=""))};search=e=>{let t=this.treeContent.querySelectorAll("li");if(t.length){this.collpaseAll();let o=n.currentCategoriesContent.table;for(let n=0;n<t.length;n++){let l=t[n].querySelectorAll('div[name="li-term-text"]'),r=l[0],i=r.textContent,a=o[i].RDFLabel,s=[...l],d=s.map((e=>e.firstChild.textContent)).join("\n"),p=s.map((e=>o[e.firstChild.textContent].RDFLabel)).join("\n");(d||p)&&(p.toUpperCase().indexOf(e)>-1||d.toUpperCase().indexOf(e)>-1?(t[n].style.display="",a.toUpperCase().indexOf(e)>-1||i.toUpperCase().indexOf(e)>-1?r.style.backgroundColor=e?"#fddde6":"transparent":r.style.background="transparent"):(t[n].style.display="none",r.style.background="transparent"))}}}}(t,e,o,r);a.replaceWith(l.treeContent)}else a.innerHTML=""}})),t.querySelector("#ontopanel-onto-extra-btn-MSEO").onclick=e=>{e.preventDefault(),fetch("plugins/ontopanelPlugin/ontoData/mseo_ontopanel.json").then((e=>e.json())).then((e=>{e.onto_table.namespaces=n.mesoNamespace,n.modifyOntoBank(["ontopanel-onto-extra-btn-MSEO",e],"add"),n.loadCurrentTable(e),console.log(n.currentCategoriesContent)}))},t.querySelector("#ontopanel-namespace-btn").onclick=t=>{if(t.preventDefault(),n.currentCategoriesContent.title){let l=n.ontoBank["ontopanel-onto-extra-btn-"+n.currentCategoriesContent.title].onto_table.namespaces.join("<br/>"),r=new mxCell(l+"<br/>",new mxGeometry(0,0,90,26),"shape=note;whiteSpace=wrap;html=1;backgroundOutline=1;darkOpacity=0.05;"),i=e.editor.graph.getPreferredSizeForCell(r);r.geometry.width=i.width+30,r.vertex=!0;let a=i.width+30,s=e.editor.graph,d=mxUtils.convertPoint(s.container,o.getX(),o.getY()),p=mxUtils.convertPoint(s.container,mxEvent.getClientX(t),mxEvent.getClientY(t)),c=e.editor.graph.view.translate,u=e.editor.graph.view.scale,h=d.x/u-c.x-a,m=p.y/u-c.y;const y=[r];e.editor.graph.importCells(y,h,m)}};let u=t.querySelector(".ontopanel-setting");return u.onchange=e=>{e.preventDefault(),n.setting=u.value,document.getElementById("ontopanel-tree-class-btn").click()},o})(e);e.actions.addAction("entityfinder",(function(){t.setVisible(!t.isVisible())}));let o=f(e);e.actions.addAction("convertor",(function(){o.setVisible(!o.isVisible())}));var a=e.menus.get("extras"),s=a.funct;a.funct=function(t,o){s.apply(this,arguments),e.menus.addMenuItems(t,["convertor"],o),e.menus.addMenuItems(t,["entityfinder"],o)}}))}},(function(e){e.h=()=>"052f92c0f31e94df42a5"}));